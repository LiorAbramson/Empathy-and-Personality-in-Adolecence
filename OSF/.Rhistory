DImp5_B5 <-as.data.frame(impute.transcan(Imp_B5,imputation=5,data=D,list.out=T,pr=F))
col <- colnames(D)
varsEmp <- c(which(col=="EMPQ_emotional"), which(col=="EMPQ_cognitive"))
DImp1 <-cbind.data.frame(D[,c(1,2)],DImp1_B5, D[,varsEmp])
DImp2 <-cbind.data.frame(D[,c(1,2)],DImp2_B5, D[,varsEmp])
DImp3 <-cbind.data.frame(D[,c(1,2)],DImp3_B5, D[,varsEmp])
DImp4 <-cbind.data.frame(D[,c(1,2)],DImp4_B5, D[,varsEmp])
DImp5 <-cbind.data.frame(D[,c(1,2)],DImp5_B5, D[,varsEmp])
#reverse items  (items' content description will be added soon)
CreateReverseItems_allData <-function(DImp) {
DImp$el_BFI6_Rev <-  6-DImp$el_BFI6
DImp$el_BFI21_Rev <- 6-DImp$el_BFI21
DImp$el_BFI31_Rev <- 6-DImp$el_BFI31
DImp$el_BFI2_Rev <-  6-DImp$el_BFI2
DImp$el_BFI12_Rev <- 6-DImp$el_BFI12
DImp$el_BFI27_Rev <- 6-DImp$el_BFI27
DImp$el_BFI37_Rev <- 6-DImp$el_BFI37
DImp$el_BFI8_Rev <-  6-DImp$el_BFI8
DImp$el_BFI18_Rev <- 6-DImp$el_BFI18
DImp$el_BFI23_Rev <- 6-DImp$el_BFI23
DImp$el_BFI43_Rev <- 6-DImp$el_BFI43
DImp$el_BFI9_Rev <-  6-DImp$el_BFI9
DImp$el_BFI24_Rev <- 6-DImp$el_BFI24
DImp$el_BFI34_Rev <- 6-DImp$el_BFI34
DImp$el_BFI35_Rev <- 6-DImp$el_BFI35
DImp$el_BFI41_Rev <- 6-DImp$el_BFI41
assign ("DImp",DImp,envir = .GlobalEnv)
}
CreateReverseItems_allData(DImp1)    #if you want to check another imputed dataset, enter it here instead of DImp1
DImp1.1 <- DImp
#defining the relevant variables for the Ridge regression
col <- colnames(DImp1.1)
relvar_emotional <- c(which (col=="EMPQ_emotional"),
which (col=="el_BFI1"), which (col=="el_BFI2_Rev"), which (col=="el_BFI3"),which (col=="el_BFI4"),
which (col=="el_BFI5"),which (col=="el_BFI6_Rev"),which (col=="el_BFI7"),which (col=="el_BFI8_Rev"),
which (col=="el_BFI9_Rev"),which (col=="el_BFI10"),which (col=="el_BFI11"),which (col=="el_BFI12_Rev"),
which (col=="el_BFI13"),which (col=="el_BFI14"),which (col=="el_BFI15"),which (col=="el_BFI16"),
which (col=="el_BFI17"),which (col=="el_BFI18_Rev"),which (col=="el_BFI19"),which (col=="el_BFI20"),
which (col=="el_BFI21_Rev"),which (col=="el_BFI22"),which (col=="el_BFI23_Rev"),which (col=="el_BFI24_Rev"),
which (col=="el_BFI25"),which (col=="el_BFI26"),which (col=="el_BFI27_Rev"),which (col=="el_BFI28"),
which (col=="el_BFI29"),which (col=="el_BFI30"),which (col=="el_BFI31_Rev"),which (col=="el_BFI32"),
which (col=="el_BFI33"),which (col=="el_BFI34_Rev"),which (col=="el_BFI35_Rev"),which (col=="el_BFI36"),
which (col=="el_BFI37_Rev"),which (col=="el_BFI38"),which (col=="el_BFI39"),which (col=="el_BFI40"),
which (col=="el_BFI41_Rev"),which (col=="el_BFI42"),which (col=="el_BFI43_Rev"),which (col=="el_BFI44"))
relvar_cognitive <- c(which(col=="EMPQ_cognitive"),
which (col=="el_BFI1"), which (col=="el_BFI2_Rev"), which (col=="el_BFI3"),which (col=="el_BFI4"),
which (col=="el_BFI5"),which (col=="el_BFI6_Rev"),which (col=="el_BFI7"),which (col=="el_BFI8_Rev"),
which (col=="el_BFI9_Rev"),which (col=="el_BFI10"),which (col=="el_BFI11"),which (col=="el_BFI12_Rev"),
which (col=="el_BFI13"),which (col=="el_BFI14"),which (col=="el_BFI15"),which (col=="el_BFI16"),
which (col=="el_BFI17"),which (col=="el_BFI18_Rev"),which (col=="el_BFI19"),which (col=="el_BFI20"),
which (col=="el_BFI21_Rev"),which (col=="el_BFI22"),which (col=="el_BFI23_Rev"),which (col=="el_BFI24_Rev"),
which (col=="el_BFI25"),which (col=="el_BFI26"),which (col=="el_BFI27_Rev"),which (col=="el_BFI28"),
which (col=="el_BFI29"),which (col=="el_BFI30"),which (col=="el_BFI31_Rev"),which (col=="el_BFI32"),
which (col=="el_BFI33"),which (col=="el_BFI34_Rev"),which (col=="el_BFI35_Rev"),which (col=="el_BFI36"),
which (col=="el_BFI37_Rev"),which (col=="el_BFI38"),which (col=="el_BFI39"),which (col=="el_BFI40"),
which (col=="el_BFI41_Rev"),which (col=="el_BFI42"),which (col=="el_BFI43_Rev"),which (col=="el_BFI44"))
#changing the names of age 11 and age 13 to be the same
newnames <- gsub(x=colnames(DImp1.1[,relvar_emotional]),pattern="el_", replacement="")
colnames(DImp1.1)[relvar_emotional] <- newnames
#dividing the 6 folds so two twins from the same family will always be in the same test fold
#gfold is the variable allocating family to a specific fold
unique_ifams <- unique(DImp1.1$ifam)
set.seed(32189)
unique_ifams <- sample(unique_ifams)
remainder<-length(unique_ifams)%%6
nfold <- (length(unique_ifams)-remainder)/6
gfold <- c(rep(1, times=nfold), rep(2, times=nfold), rep(3, times=nfold),
rep(4, times=nfold), rep(5, times=nfold), rep(6, times=nfold))
gfold <- c(gfold,1:remainder)
unique_ifams <- cbind(unique_ifams,gfold)
ifams<- as.data.frame(rbind(unique_ifams, unique_ifams))
colnames(ifams) <- c("ifam","gfold")
ifams$ID<- c(rep(1,times=nrow(unique_ifams)),rep(4,times=nrow(unique_ifams)))  # allocate ID for each twin (ID 1=older twin, ID 4= younger twin)
DImp1.1<- merge(DImp1.1,ifams, by=c("ifam","ID"), all.x = T, all.y = F)        #merge the gfold var with the data
DImp1.1$gfold==temporary$gfold
summary(as.factor(DImp1.1$gfold==temporary$gfold))
temporary$ifam[which(DImp1.1$gfold!=temporary$gfold)]
rm(list = ls()) # clean the global environment
cat ("\014")    #clean the R console
#Packages
packages <- c('psych', 'Hmisc', 'glmnet','ggplot2', 'reshape')
lapply(packages, require, character.only = TRUE)
#Preparing the file
D <- read.csv("~/Documents/projects/Empathy-Personality-Adolecence/OSF/data/Age11_EmpPer_anonymized.csv")
D <- D[D$isOut==0,]                      #take out children that should not be included (see supplementary method)
D <- subset(D, !is.na(D$EMPQ_emotional)) #take out children with no empathy measures
#Handling missing values
#first count how many missing values are in each var:
ind <- which(colnames(D)=="el_BFI1")
descD <- describe(D[,ind:(ind+43)])
#calculate percentage of missing values for each item (descD$itemname[2])
missingBFI11 <- c()
for (i in 1:44){
eval(parse(text= paste0("missingBFI11[",i,"] <-as.numeric(descD$el_BFI",i,
"$counts[2])/ nrow(D)")))
}
max(missingBFI11)           #find the maximum percentage of missing values
#Imputations of missing values for the Big5 (pmm)
set.seed(12) #set the random vector to always be the same vector
Imp_B5 <- aregImpute (formula= ~el_BFI1+ el_BFI2+ el_BFI3+ el_BFI4+ el_BFI5+ el_BFI6+ el_BFI7+ el_BFI8+el_BFI9+ el_BFI10+
el_BFI11+ el_BFI12+ el_BFI13+ el_BFI14+ el_BFI15+ el_BFI16+ el_BFI17+ el_BFI18+el_BFI19+ el_BFI20+
el_BFI21+ el_BFI22+ el_BFI23+ el_BFI24+ el_BFI25+ el_BFI26+ el_BFI27+ el_BFI28+el_BFI29+ el_BFI30+
el_BFI31+ el_BFI32+ el_BFI33+ el_BFI34+ el_BFI35+ el_BFI36+ el_BFI37+ el_BFI38+el_BFI39+ el_BFI40+
el_BFI41+ el_BFI42+ el_BFI43+ el_BFI44,
data=D, x=T,n.impute=5 , nk=0, type="pmm")
#Creating five data sets with different imputed values
#DImp1 is the data frame reported in the paper.
#The overall prediction of empathy from personality was examined on the other 4 datasets
#as a robustness check (see appendix)
DImp1_B5 <-as.data.frame(impute.transcan(Imp_B5,imputation=1,data=D,list.out=T,pr=F))
DImp2_B5 <-as.data.frame(impute.transcan(Imp_B5,imputation=2,data=D,list.out=T,pr=F))
DImp3_B5 <-as.data.frame(impute.transcan(Imp_B5,imputation=3,data=D,list.out=T,pr=F))
DImp4_B5 <-as.data.frame(impute.transcan(Imp_B5,imputation=4,data=D,list.out=T,pr=F))
DImp5_B5 <-as.data.frame(impute.transcan(Imp_B5,imputation=5,data=D,list.out=T,pr=F))
col <- colnames(D)
varsEmp <- c(which(col=="EMPQ_emotional"), which(col=="EMPQ_cognitive"))
DImp1 <-cbind.data.frame(D[,c(1,2)],DImp1_B5, D[,varsEmp])
DImp2 <-cbind.data.frame(D[,c(1,2)],DImp2_B5, D[,varsEmp])
DImp3 <-cbind.data.frame(D[,c(1,2)],DImp3_B5, D[,varsEmp])
DImp4 <-cbind.data.frame(D[,c(1,2)],DImp4_B5, D[,varsEmp])
DImp5 <-cbind.data.frame(D[,c(1,2)],DImp5_B5, D[,varsEmp])
#reverse items  (items' content description will be added soon)
CreateReverseItems_allData <-function(DImp) {
DImp$el_BFI6_Rev <-  6-DImp$el_BFI6
DImp$el_BFI21_Rev <- 6-DImp$el_BFI21
DImp$el_BFI31_Rev <- 6-DImp$el_BFI31
DImp$el_BFI2_Rev <-  6-DImp$el_BFI2
DImp$el_BFI12_Rev <- 6-DImp$el_BFI12
DImp$el_BFI27_Rev <- 6-DImp$el_BFI27
DImp$el_BFI37_Rev <- 6-DImp$el_BFI37
DImp$el_BFI8_Rev <-  6-DImp$el_BFI8
DImp$el_BFI18_Rev <- 6-DImp$el_BFI18
DImp$el_BFI23_Rev <- 6-DImp$el_BFI23
DImp$el_BFI43_Rev <- 6-DImp$el_BFI43
DImp$el_BFI9_Rev <-  6-DImp$el_BFI9
DImp$el_BFI24_Rev <- 6-DImp$el_BFI24
DImp$el_BFI34_Rev <- 6-DImp$el_BFI34
DImp$el_BFI35_Rev <- 6-DImp$el_BFI35
DImp$el_BFI41_Rev <- 6-DImp$el_BFI41
assign ("DImp",DImp,envir = .GlobalEnv)
}
CreateReverseItems_allData(DImp1)    #if you want to check another imputed dataset, enter it here instead of DImp1
DImp1.1 <- DImp
#defining the relevant variables for the Ridge regression
col <- colnames(DImp1.1)
relvar_emotional <- c(which (col=="EMPQ_emotional"),
which (col=="el_BFI1"), which (col=="el_BFI2_Rev"), which (col=="el_BFI3"),which (col=="el_BFI4"),
which (col=="el_BFI5"),which (col=="el_BFI6_Rev"),which (col=="el_BFI7"),which (col=="el_BFI8_Rev"),
which (col=="el_BFI9_Rev"),which (col=="el_BFI10"),which (col=="el_BFI11"),which (col=="el_BFI12_Rev"),
which (col=="el_BFI13"),which (col=="el_BFI14"),which (col=="el_BFI15"),which (col=="el_BFI16"),
which (col=="el_BFI17"),which (col=="el_BFI18_Rev"),which (col=="el_BFI19"),which (col=="el_BFI20"),
which (col=="el_BFI21_Rev"),which (col=="el_BFI22"),which (col=="el_BFI23_Rev"),which (col=="el_BFI24_Rev"),
which (col=="el_BFI25"),which (col=="el_BFI26"),which (col=="el_BFI27_Rev"),which (col=="el_BFI28"),
which (col=="el_BFI29"),which (col=="el_BFI30"),which (col=="el_BFI31_Rev"),which (col=="el_BFI32"),
which (col=="el_BFI33"),which (col=="el_BFI34_Rev"),which (col=="el_BFI35_Rev"),which (col=="el_BFI36"),
which (col=="el_BFI37_Rev"),which (col=="el_BFI38"),which (col=="el_BFI39"),which (col=="el_BFI40"),
which (col=="el_BFI41_Rev"),which (col=="el_BFI42"),which (col=="el_BFI43_Rev"),which (col=="el_BFI44"))
relvar_cognitive <- c(which(col=="EMPQ_cognitive"),
which (col=="el_BFI1"), which (col=="el_BFI2_Rev"), which (col=="el_BFI3"),which (col=="el_BFI4"),
which (col=="el_BFI5"),which (col=="el_BFI6_Rev"),which (col=="el_BFI7"),which (col=="el_BFI8_Rev"),
which (col=="el_BFI9_Rev"),which (col=="el_BFI10"),which (col=="el_BFI11"),which (col=="el_BFI12_Rev"),
which (col=="el_BFI13"),which (col=="el_BFI14"),which (col=="el_BFI15"),which (col=="el_BFI16"),
which (col=="el_BFI17"),which (col=="el_BFI18_Rev"),which (col=="el_BFI19"),which (col=="el_BFI20"),
which (col=="el_BFI21_Rev"),which (col=="el_BFI22"),which (col=="el_BFI23_Rev"),which (col=="el_BFI24_Rev"),
which (col=="el_BFI25"),which (col=="el_BFI26"),which (col=="el_BFI27_Rev"),which (col=="el_BFI28"),
which (col=="el_BFI29"),which (col=="el_BFI30"),which (col=="el_BFI31_Rev"),which (col=="el_BFI32"),
which (col=="el_BFI33"),which (col=="el_BFI34_Rev"),which (col=="el_BFI35_Rev"),which (col=="el_BFI36"),
which (col=="el_BFI37_Rev"),which (col=="el_BFI38"),which (col=="el_BFI39"),which (col=="el_BFI40"),
which (col=="el_BFI41_Rev"),which (col=="el_BFI42"),which (col=="el_BFI43_Rev"),which (col=="el_BFI44"))
#changing the names of age 11 and age 13 to be the same
newnames <- gsub(x=colnames(DImp1.1[,relvar_emotional]),pattern="el_", replacement="")
colnames(DImp1.1)[relvar_emotional] <- newnames
#dividing the 6 folds so two twins from the same family will always be in the same test fold
#gfold is the variable allocating family to a specific fold
unique_ifams <- unique(DImp1.1$ifam)
set.seed(32189)
unique_ifams <- sample(unique_ifams)
remainder<-length(unique_ifams)%%6
nfold <- (length(unique_ifams)-remainder)/6
gfold <- c(rep(1, times=nfold), rep(2, times=nfold), rep(3, times=nfold),
rep(4, times=nfold), rep(5, times=nfold), rep(6, times=nfold))
gfold <- c(gfold,1:remainder)
unique_ifams <- cbind(unique_ifams,gfold)
ifams<- as.data.frame(rbind(unique_ifams, unique_ifams))
colnames(ifams) <- c("ifam","gfold")
ifams$ID<- c(rep(1,times=nrow(unique_ifams)),rep(4,times=nrow(unique_ifams)))  # allocate ID for each twin (ID 1=older twin, ID 4= younger twin)
DImp1.1<- merge(DImp1.1,ifams, by=c("ifam","ID"), all.x = T, all.y = F)        #merge the gfold var with the data
temporary <- DImp1.1
#Preparing the file
D <- read.csv("~/Documents/projects/Empathy-Personality-Adolecence/OSF/data/Age11_EmpPer_anonymized_original.csv")
D <- D[D$isOut==0,]                      #take out children that should not be included (see supplementary method)
D <- subset(D, !is.na(D$EMPQ_emotional)) #take out children with no empathy measures
#Handling missing values
#first count how many missing values are in each var:
ind <- which(colnames(D)=="el_BFI1")
descD <- describe(D[,ind:(ind+43)])
#calculate percentage of missing values for each item (descD$itemname[2])
missingBFI11 <- c()
for (i in 1:44){
eval(parse(text= paste0("missingBFI11[",i,"] <-as.numeric(descD$el_BFI",i,
"$counts[2])/ nrow(D)")))
}
max(missingBFI11)           #find the maximum percentage of missing values
#Imputations of missing values for the Big5 (pmm)
set.seed(12) #set the random vector to always be the same vector
Imp_B5 <- aregImpute (formula= ~el_BFI1+ el_BFI2+ el_BFI3+ el_BFI4+ el_BFI5+ el_BFI6+ el_BFI7+ el_BFI8+el_BFI9+ el_BFI10+
el_BFI11+ el_BFI12+ el_BFI13+ el_BFI14+ el_BFI15+ el_BFI16+ el_BFI17+ el_BFI18+el_BFI19+ el_BFI20+
el_BFI21+ el_BFI22+ el_BFI23+ el_BFI24+ el_BFI25+ el_BFI26+ el_BFI27+ el_BFI28+el_BFI29+ el_BFI30+
el_BFI31+ el_BFI32+ el_BFI33+ el_BFI34+ el_BFI35+ el_BFI36+ el_BFI37+ el_BFI38+el_BFI39+ el_BFI40+
el_BFI41+ el_BFI42+ el_BFI43+ el_BFI44,
data=D, x=T,n.impute=5 , nk=0, type="pmm")
#Creating five data sets with different imputed values
#DImp1 is the data frame reported in the paper.
#The overall prediction of empathy from personality was examined on the other 4 datasets
#as a robustness check (see appendix)
DImp1_B5 <-as.data.frame(impute.transcan(Imp_B5,imputation=1,data=D,list.out=T,pr=F))
DImp2_B5 <-as.data.frame(impute.transcan(Imp_B5,imputation=2,data=D,list.out=T,pr=F))
DImp3_B5 <-as.data.frame(impute.transcan(Imp_B5,imputation=3,data=D,list.out=T,pr=F))
DImp4_B5 <-as.data.frame(impute.transcan(Imp_B5,imputation=4,data=D,list.out=T,pr=F))
DImp5_B5 <-as.data.frame(impute.transcan(Imp_B5,imputation=5,data=D,list.out=T,pr=F))
col <- colnames(D)
varsEmp <- c(which(col=="EMPQ_emotional"), which(col=="EMPQ_cognitive"))
DImp1 <-cbind.data.frame(D[,c(1,2)],DImp1_B5, D[,varsEmp])
DImp2 <-cbind.data.frame(D[,c(1,2)],DImp2_B5, D[,varsEmp])
DImp3 <-cbind.data.frame(D[,c(1,2)],DImp3_B5, D[,varsEmp])
DImp4 <-cbind.data.frame(D[,c(1,2)],DImp4_B5, D[,varsEmp])
DImp5 <-cbind.data.frame(D[,c(1,2)],DImp5_B5, D[,varsEmp])
#reverse items  (items' content description will be added soon)
CreateReverseItems_allData <-function(DImp) {
DImp$el_BFI6_Rev <-  6-DImp$el_BFI6
DImp$el_BFI21_Rev <- 6-DImp$el_BFI21
DImp$el_BFI31_Rev <- 6-DImp$el_BFI31
DImp$el_BFI2_Rev <-  6-DImp$el_BFI2
DImp$el_BFI12_Rev <- 6-DImp$el_BFI12
DImp$el_BFI27_Rev <- 6-DImp$el_BFI27
DImp$el_BFI37_Rev <- 6-DImp$el_BFI37
DImp$el_BFI8_Rev <-  6-DImp$el_BFI8
DImp$el_BFI18_Rev <- 6-DImp$el_BFI18
DImp$el_BFI23_Rev <- 6-DImp$el_BFI23
DImp$el_BFI43_Rev <- 6-DImp$el_BFI43
DImp$el_BFI9_Rev <-  6-DImp$el_BFI9
DImp$el_BFI24_Rev <- 6-DImp$el_BFI24
DImp$el_BFI34_Rev <- 6-DImp$el_BFI34
DImp$el_BFI35_Rev <- 6-DImp$el_BFI35
DImp$el_BFI41_Rev <- 6-DImp$el_BFI41
assign ("DImp",DImp,envir = .GlobalEnv)
}
CreateReverseItems_allData(DImp1)    #if you want to check another imputed dataset, enter it here instead of DImp1
DImp1.1 <- DImp
#defining the relevant variables for the Ridge regression
col <- colnames(DImp1.1)
relvar_emotional <- c(which (col=="EMPQ_emotional"),
which (col=="el_BFI1"), which (col=="el_BFI2_Rev"), which (col=="el_BFI3"),which (col=="el_BFI4"),
which (col=="el_BFI5"),which (col=="el_BFI6_Rev"),which (col=="el_BFI7"),which (col=="el_BFI8_Rev"),
which (col=="el_BFI9_Rev"),which (col=="el_BFI10"),which (col=="el_BFI11"),which (col=="el_BFI12_Rev"),
which (col=="el_BFI13"),which (col=="el_BFI14"),which (col=="el_BFI15"),which (col=="el_BFI16"),
which (col=="el_BFI17"),which (col=="el_BFI18_Rev"),which (col=="el_BFI19"),which (col=="el_BFI20"),
which (col=="el_BFI21_Rev"),which (col=="el_BFI22"),which (col=="el_BFI23_Rev"),which (col=="el_BFI24_Rev"),
which (col=="el_BFI25"),which (col=="el_BFI26"),which (col=="el_BFI27_Rev"),which (col=="el_BFI28"),
which (col=="el_BFI29"),which (col=="el_BFI30"),which (col=="el_BFI31_Rev"),which (col=="el_BFI32"),
which (col=="el_BFI33"),which (col=="el_BFI34_Rev"),which (col=="el_BFI35_Rev"),which (col=="el_BFI36"),
which (col=="el_BFI37_Rev"),which (col=="el_BFI38"),which (col=="el_BFI39"),which (col=="el_BFI40"),
which (col=="el_BFI41_Rev"),which (col=="el_BFI42"),which (col=="el_BFI43_Rev"),which (col=="el_BFI44"))
relvar_cognitive <- c(which(col=="EMPQ_cognitive"),
which (col=="el_BFI1"), which (col=="el_BFI2_Rev"), which (col=="el_BFI3"),which (col=="el_BFI4"),
which (col=="el_BFI5"),which (col=="el_BFI6_Rev"),which (col=="el_BFI7"),which (col=="el_BFI8_Rev"),
which (col=="el_BFI9_Rev"),which (col=="el_BFI10"),which (col=="el_BFI11"),which (col=="el_BFI12_Rev"),
which (col=="el_BFI13"),which (col=="el_BFI14"),which (col=="el_BFI15"),which (col=="el_BFI16"),
which (col=="el_BFI17"),which (col=="el_BFI18_Rev"),which (col=="el_BFI19"),which (col=="el_BFI20"),
which (col=="el_BFI21_Rev"),which (col=="el_BFI22"),which (col=="el_BFI23_Rev"),which (col=="el_BFI24_Rev"),
which (col=="el_BFI25"),which (col=="el_BFI26"),which (col=="el_BFI27_Rev"),which (col=="el_BFI28"),
which (col=="el_BFI29"),which (col=="el_BFI30"),which (col=="el_BFI31_Rev"),which (col=="el_BFI32"),
which (col=="el_BFI33"),which (col=="el_BFI34_Rev"),which (col=="el_BFI35_Rev"),which (col=="el_BFI36"),
which (col=="el_BFI37_Rev"),which (col=="el_BFI38"),which (col=="el_BFI39"),which (col=="el_BFI40"),
which (col=="el_BFI41_Rev"),which (col=="el_BFI42"),which (col=="el_BFI43_Rev"),which (col=="el_BFI44"))
#changing the names of age 11 and age 13 to be the same
newnames <- gsub(x=colnames(DImp1.1[,relvar_emotional]),pattern="el_", replacement="")
colnames(DImp1.1)[relvar_emotional] <- newnames
#dividing the 6 folds so two twins from the same family will always be in the same test fold
#gfold is the variable allocating family to a specific fold
unique_ifams <- unique(DImp1.1$ifam)
set.seed(32189)
unique_ifams <- sample(unique_ifams)
remainder<-length(unique_ifams)%%6
nfold <- (length(unique_ifams)-remainder)/6
gfold <- c(rep(1, times=nfold), rep(2, times=nfold), rep(3, times=nfold),
rep(4, times=nfold), rep(5, times=nfold), rep(6, times=nfold))
gfold <- c(gfold,1:remainder)
unique_ifams <- cbind(unique_ifams,gfold)
ifams<- as.data.frame(rbind(unique_ifams, unique_ifams))
colnames(ifams) <- c("ifam","gfold")
ifams$ID<- c(rep(1,times=nrow(unique_ifams)),rep(4,times=nrow(unique_ifams)))  # allocate ID for each twin (ID 1=older twin, ID 4= younger twin)
DImp1.1<- merge(DImp1.1,ifams, by=c("ifam","ID"), all.x = T, all.y = F)        #merge the gfold var with the data
summary(as.factor(temporary$gfold==DImp1.1$gfold))
DImp1.1$ifam[which(DImp1.1$gfold!=temporary$gfold)]
rm(list = ls()) # clean the global environment
cat ("\014")    #clean the R console
#Packages
packages <- c('psych', 'Hmisc', 'glmnet','ggplot2', 'reshape')
lapply(packages, require, character.only = TRUE)
#Preparing the file
D <- read.csv("~/Documents/projects/Empathy-Personality-Adolecence/OSF/data/Age11_EmpPer_anonymized_original.csv")
D <- D[D$isOut==0,]                      #take out children that should not be included (see supplementary method)
D <- subset(D, !is.na(D$EMPQ_emotional)) #take out children with no empathy measures
#Handling missing values
#first count how many missing values are in each var:
ind <- which(colnames(D)=="el_BFI1")
descD <- describe(D[,ind:(ind+43)])
#calculate percentage of missing values for each item (descD$itemname[2])
missingBFI11 <- c()
for (i in 1:44){
eval(parse(text= paste0("missingBFI11[",i,"] <-as.numeric(descD$el_BFI",i,
"$counts[2])/ nrow(D)")))
}
max(missingBFI11)           #find the maximum percentage of missing values
#Imputations of missing values for the Big5 (pmm)
set.seed(12) #set the random vector to always be the same vector
Imp_B5 <- aregImpute (formula= ~el_BFI1+ el_BFI2+ el_BFI3+ el_BFI4+ el_BFI5+ el_BFI6+ el_BFI7+ el_BFI8+el_BFI9+ el_BFI10+
el_BFI11+ el_BFI12+ el_BFI13+ el_BFI14+ el_BFI15+ el_BFI16+ el_BFI17+ el_BFI18+el_BFI19+ el_BFI20+
el_BFI21+ el_BFI22+ el_BFI23+ el_BFI24+ el_BFI25+ el_BFI26+ el_BFI27+ el_BFI28+el_BFI29+ el_BFI30+
el_BFI31+ el_BFI32+ el_BFI33+ el_BFI34+ el_BFI35+ el_BFI36+ el_BFI37+ el_BFI38+el_BFI39+ el_BFI40+
el_BFI41+ el_BFI42+ el_BFI43+ el_BFI44,
data=D, x=T,n.impute=5 , nk=0, type="pmm")
#Creating five data sets with different imputed values
#DImp1 is the data frame reported in the paper.
#The overall prediction of empathy from personality was examined on the other 4 datasets
#as a robustness check (see appendix)
DImp1_B5 <-as.data.frame(impute.transcan(Imp_B5,imputation=1,data=D,list.out=T,pr=F))
DImp2_B5 <-as.data.frame(impute.transcan(Imp_B5,imputation=2,data=D,list.out=T,pr=F))
DImp3_B5 <-as.data.frame(impute.transcan(Imp_B5,imputation=3,data=D,list.out=T,pr=F))
DImp4_B5 <-as.data.frame(impute.transcan(Imp_B5,imputation=4,data=D,list.out=T,pr=F))
DImp5_B5 <-as.data.frame(impute.transcan(Imp_B5,imputation=5,data=D,list.out=T,pr=F))
col <- colnames(D)
varsEmp <- c(which(col=="EMPQ_emotional"), which(col=="EMPQ_cognitive"))
DImp1 <-cbind.data.frame(D[,c(1,2)],DImp1_B5, D[,varsEmp])
DImp2 <-cbind.data.frame(D[,c(1,2)],DImp2_B5, D[,varsEmp])
DImp3 <-cbind.data.frame(D[,c(1,2)],DImp3_B5, D[,varsEmp])
DImp4 <-cbind.data.frame(D[,c(1,2)],DImp4_B5, D[,varsEmp])
DImp5 <-cbind.data.frame(D[,c(1,2)],DImp5_B5, D[,varsEmp])
#reverse items  (items' content description will be added soon)
CreateReverseItems_allData <-function(DImp) {
DImp$el_BFI6_Rev <-  6-DImp$el_BFI6
DImp$el_BFI21_Rev <- 6-DImp$el_BFI21
DImp$el_BFI31_Rev <- 6-DImp$el_BFI31
DImp$el_BFI2_Rev <-  6-DImp$el_BFI2
DImp$el_BFI12_Rev <- 6-DImp$el_BFI12
DImp$el_BFI27_Rev <- 6-DImp$el_BFI27
DImp$el_BFI37_Rev <- 6-DImp$el_BFI37
DImp$el_BFI8_Rev <-  6-DImp$el_BFI8
DImp$el_BFI18_Rev <- 6-DImp$el_BFI18
DImp$el_BFI23_Rev <- 6-DImp$el_BFI23
DImp$el_BFI43_Rev <- 6-DImp$el_BFI43
DImp$el_BFI9_Rev <-  6-DImp$el_BFI9
DImp$el_BFI24_Rev <- 6-DImp$el_BFI24
DImp$el_BFI34_Rev <- 6-DImp$el_BFI34
DImp$el_BFI35_Rev <- 6-DImp$el_BFI35
DImp$el_BFI41_Rev <- 6-DImp$el_BFI41
assign ("DImp",DImp,envir = .GlobalEnv)
}
CreateReverseItems_allData(DImp1)    #if you want to check another imputed dataset, enter it here instead of DImp1
DImp1.1 <- DImp
#defining the relevant variables for the Ridge regression
col <- colnames(DImp1.1)
relvar_emotional <- c(which (col=="EMPQ_emotional"),
which (col=="el_BFI1"), which (col=="el_BFI2_Rev"), which (col=="el_BFI3"),which (col=="el_BFI4"),
which (col=="el_BFI5"),which (col=="el_BFI6_Rev"),which (col=="el_BFI7"),which (col=="el_BFI8_Rev"),
which (col=="el_BFI9_Rev"),which (col=="el_BFI10"),which (col=="el_BFI11"),which (col=="el_BFI12_Rev"),
which (col=="el_BFI13"),which (col=="el_BFI14"),which (col=="el_BFI15"),which (col=="el_BFI16"),
which (col=="el_BFI17"),which (col=="el_BFI18_Rev"),which (col=="el_BFI19"),which (col=="el_BFI20"),
which (col=="el_BFI21_Rev"),which (col=="el_BFI22"),which (col=="el_BFI23_Rev"),which (col=="el_BFI24_Rev"),
which (col=="el_BFI25"),which (col=="el_BFI26"),which (col=="el_BFI27_Rev"),which (col=="el_BFI28"),
which (col=="el_BFI29"),which (col=="el_BFI30"),which (col=="el_BFI31_Rev"),which (col=="el_BFI32"),
which (col=="el_BFI33"),which (col=="el_BFI34_Rev"),which (col=="el_BFI35_Rev"),which (col=="el_BFI36"),
which (col=="el_BFI37_Rev"),which (col=="el_BFI38"),which (col=="el_BFI39"),which (col=="el_BFI40"),
which (col=="el_BFI41_Rev"),which (col=="el_BFI42"),which (col=="el_BFI43_Rev"),which (col=="el_BFI44"))
relvar_cognitive <- c(which(col=="EMPQ_cognitive"),
which (col=="el_BFI1"), which (col=="el_BFI2_Rev"), which (col=="el_BFI3"),which (col=="el_BFI4"),
which (col=="el_BFI5"),which (col=="el_BFI6_Rev"),which (col=="el_BFI7"),which (col=="el_BFI8_Rev"),
which (col=="el_BFI9_Rev"),which (col=="el_BFI10"),which (col=="el_BFI11"),which (col=="el_BFI12_Rev"),
which (col=="el_BFI13"),which (col=="el_BFI14"),which (col=="el_BFI15"),which (col=="el_BFI16"),
which (col=="el_BFI17"),which (col=="el_BFI18_Rev"),which (col=="el_BFI19"),which (col=="el_BFI20"),
which (col=="el_BFI21_Rev"),which (col=="el_BFI22"),which (col=="el_BFI23_Rev"),which (col=="el_BFI24_Rev"),
which (col=="el_BFI25"),which (col=="el_BFI26"),which (col=="el_BFI27_Rev"),which (col=="el_BFI28"),
which (col=="el_BFI29"),which (col=="el_BFI30"),which (col=="el_BFI31_Rev"),which (col=="el_BFI32"),
which (col=="el_BFI33"),which (col=="el_BFI34_Rev"),which (col=="el_BFI35_Rev"),which (col=="el_BFI36"),
which (col=="el_BFI37_Rev"),which (col=="el_BFI38"),which (col=="el_BFI39"),which (col=="el_BFI40"),
which (col=="el_BFI41_Rev"),which (col=="el_BFI42"),which (col=="el_BFI43_Rev"),which (col=="el_BFI44"))
#changing the names of age 11 and age 13 to be the same
newnames <- gsub(x=colnames(DImp1.1[,relvar_emotional]),pattern="el_", replacement="")
colnames(DImp1.1)[relvar_emotional] <- newnames
#dividing the 6 folds so two twins from the same family will always be in the same test fold
#gfold is the variable allocating family to a specific fold
unique_ifams <- unique(DImp1.1$ifam)
set.seed(32189)
unique_ifams <- sample(unique_ifams)
remainder<-length(unique_ifams)%%6
nfold <- (length(unique_ifams)-remainder)/6
gfold <- c(rep(1, times=nfold), rep(2, times=nfold), rep(3, times=nfold),
rep(4, times=nfold), rep(5, times=nfold), rep(6, times=nfold))
gfold <- c(gfold,1:remainder)
unique_ifams <- cbind(unique_ifams,gfold)
ifams<- as.data.frame(rbind(unique_ifams, unique_ifams))
colnames(ifams) <- c("ifam","gfold")
ifams$ID<- c(rep(1,times=nrow(unique_ifams)),rep(4,times=nrow(unique_ifams)))  # allocate ID for each twin (ID 1=older twin, ID 4= younger twin)
DImp1.1<- merge(DImp1.1,ifams, by=c("ifam","ID"), all.x = T, all.y = F)        #merge the gfold var with the data
originalifams <- DImp1.1
#Preparing the file
D <- read.csv("~/Documents/projects/Empathy-Personality-Adolecence/OSF/data/Age11_EmpPer_anonymized.csv")
D <- D[D$isOut==0,]                      #take out children that should not be included (see supplementary method)
D <- subset(D, !is.na(D$EMPQ_emotional)) #take out children with no empathy measures
#Handling missing values
#first count how many missing values are in each var:
ind <- which(colnames(D)=="el_BFI1")
descD <- describe(D[,ind:(ind+43)])
#calculate percentage of missing values for each item (descD$itemname[2])
missingBFI11 <- c()
for (i in 1:44){
eval(parse(text= paste0("missingBFI11[",i,"] <-as.numeric(descD$el_BFI",i,
"$counts[2])/ nrow(D)")))
}
max(missingBFI11)           #find the maximum percentage of missing values
#Imputations of missing values for the Big5 (pmm)
set.seed(12) #set the random vector to always be the same vector
Imp_B5 <- aregImpute (formula= ~el_BFI1+ el_BFI2+ el_BFI3+ el_BFI4+ el_BFI5+ el_BFI6+ el_BFI7+ el_BFI8+el_BFI9+ el_BFI10+
el_BFI11+ el_BFI12+ el_BFI13+ el_BFI14+ el_BFI15+ el_BFI16+ el_BFI17+ el_BFI18+el_BFI19+ el_BFI20+
el_BFI21+ el_BFI22+ el_BFI23+ el_BFI24+ el_BFI25+ el_BFI26+ el_BFI27+ el_BFI28+el_BFI29+ el_BFI30+
el_BFI31+ el_BFI32+ el_BFI33+ el_BFI34+ el_BFI35+ el_BFI36+ el_BFI37+ el_BFI38+el_BFI39+ el_BFI40+
el_BFI41+ el_BFI42+ el_BFI43+ el_BFI44,
data=D, x=T,n.impute=5 , nk=0, type="pmm")
#Creating five data sets with different imputed values
#DImp1 is the data frame reported in the paper.
#The overall prediction of empathy from personality was examined on the other 4 datasets
#as a robustness check (see appendix)
DImp1_B5 <-as.data.frame(impute.transcan(Imp_B5,imputation=1,data=D,list.out=T,pr=F))
DImp2_B5 <-as.data.frame(impute.transcan(Imp_B5,imputation=2,data=D,list.out=T,pr=F))
DImp3_B5 <-as.data.frame(impute.transcan(Imp_B5,imputation=3,data=D,list.out=T,pr=F))
DImp4_B5 <-as.data.frame(impute.transcan(Imp_B5,imputation=4,data=D,list.out=T,pr=F))
DImp5_B5 <-as.data.frame(impute.transcan(Imp_B5,imputation=5,data=D,list.out=T,pr=F))
col <- colnames(D)
varsEmp <- c(which(col=="EMPQ_emotional"), which(col=="EMPQ_cognitive"))
DImp1 <-cbind.data.frame(D[,c(1,2)],DImp1_B5, D[,varsEmp])
DImp2 <-cbind.data.frame(D[,c(1,2)],DImp2_B5, D[,varsEmp])
DImp3 <-cbind.data.frame(D[,c(1,2)],DImp3_B5, D[,varsEmp])
DImp4 <-cbind.data.frame(D[,c(1,2)],DImp4_B5, D[,varsEmp])
DImp5 <-cbind.data.frame(D[,c(1,2)],DImp5_B5, D[,varsEmp])
#reverse items  (items' content description will be added soon)
CreateReverseItems_allData <-function(DImp) {
DImp$el_BFI6_Rev <-  6-DImp$el_BFI6
DImp$el_BFI21_Rev <- 6-DImp$el_BFI21
DImp$el_BFI31_Rev <- 6-DImp$el_BFI31
DImp$el_BFI2_Rev <-  6-DImp$el_BFI2
DImp$el_BFI12_Rev <- 6-DImp$el_BFI12
DImp$el_BFI27_Rev <- 6-DImp$el_BFI27
DImp$el_BFI37_Rev <- 6-DImp$el_BFI37
DImp$el_BFI8_Rev <-  6-DImp$el_BFI8
DImp$el_BFI18_Rev <- 6-DImp$el_BFI18
DImp$el_BFI23_Rev <- 6-DImp$el_BFI23
DImp$el_BFI43_Rev <- 6-DImp$el_BFI43
DImp$el_BFI9_Rev <-  6-DImp$el_BFI9
DImp$el_BFI24_Rev <- 6-DImp$el_BFI24
DImp$el_BFI34_Rev <- 6-DImp$el_BFI34
DImp$el_BFI35_Rev <- 6-DImp$el_BFI35
DImp$el_BFI41_Rev <- 6-DImp$el_BFI41
assign ("DImp",DImp,envir = .GlobalEnv)
}
CreateReverseItems_allData(DImp1)    #if you want to check another imputed dataset, enter it here instead of DImp1
DImp1.1 <- DImp
#defining the relevant variables for the Ridge regression
col <- colnames(DImp1.1)
relvar_emotional <- c(which (col=="EMPQ_emotional"),
which (col=="el_BFI1"), which (col=="el_BFI2_Rev"), which (col=="el_BFI3"),which (col=="el_BFI4"),
which (col=="el_BFI5"),which (col=="el_BFI6_Rev"),which (col=="el_BFI7"),which (col=="el_BFI8_Rev"),
which (col=="el_BFI9_Rev"),which (col=="el_BFI10"),which (col=="el_BFI11"),which (col=="el_BFI12_Rev"),
which (col=="el_BFI13"),which (col=="el_BFI14"),which (col=="el_BFI15"),which (col=="el_BFI16"),
which (col=="el_BFI17"),which (col=="el_BFI18_Rev"),which (col=="el_BFI19"),which (col=="el_BFI20"),
which (col=="el_BFI21_Rev"),which (col=="el_BFI22"),which (col=="el_BFI23_Rev"),which (col=="el_BFI24_Rev"),
which (col=="el_BFI25"),which (col=="el_BFI26"),which (col=="el_BFI27_Rev"),which (col=="el_BFI28"),
which (col=="el_BFI29"),which (col=="el_BFI30"),which (col=="el_BFI31_Rev"),which (col=="el_BFI32"),
which (col=="el_BFI33"),which (col=="el_BFI34_Rev"),which (col=="el_BFI35_Rev"),which (col=="el_BFI36"),
which (col=="el_BFI37_Rev"),which (col=="el_BFI38"),which (col=="el_BFI39"),which (col=="el_BFI40"),
which (col=="el_BFI41_Rev"),which (col=="el_BFI42"),which (col=="el_BFI43_Rev"),which (col=="el_BFI44"))
relvar_cognitive <- c(which(col=="EMPQ_cognitive"),
which (col=="el_BFI1"), which (col=="el_BFI2_Rev"), which (col=="el_BFI3"),which (col=="el_BFI4"),
which (col=="el_BFI5"),which (col=="el_BFI6_Rev"),which (col=="el_BFI7"),which (col=="el_BFI8_Rev"),
which (col=="el_BFI9_Rev"),which (col=="el_BFI10"),which (col=="el_BFI11"),which (col=="el_BFI12_Rev"),
which (col=="el_BFI13"),which (col=="el_BFI14"),which (col=="el_BFI15"),which (col=="el_BFI16"),
which (col=="el_BFI17"),which (col=="el_BFI18_Rev"),which (col=="el_BFI19"),which (col=="el_BFI20"),
which (col=="el_BFI21_Rev"),which (col=="el_BFI22"),which (col=="el_BFI23_Rev"),which (col=="el_BFI24_Rev"),
which (col=="el_BFI25"),which (col=="el_BFI26"),which (col=="el_BFI27_Rev"),which (col=="el_BFI28"),
which (col=="el_BFI29"),which (col=="el_BFI30"),which (col=="el_BFI31_Rev"),which (col=="el_BFI32"),
which (col=="el_BFI33"),which (col=="el_BFI34_Rev"),which (col=="el_BFI35_Rev"),which (col=="el_BFI36"),
which (col=="el_BFI37_Rev"),which (col=="el_BFI38"),which (col=="el_BFI39"),which (col=="el_BFI40"),
which (col=="el_BFI41_Rev"),which (col=="el_BFI42"),which (col=="el_BFI43_Rev"),which (col=="el_BFI44"))
#changing the names of age 11 and age 13 to be the same
newnames <- gsub(x=colnames(DImp1.1[,relvar_emotional]),pattern="el_", replacement="")
colnames(DImp1.1)[relvar_emotional] <- newnames
#dividing the 6 folds so two twins from the same family will always be in the same test fold
#gfold is the variable allocating family to a specific fold
unique_ifams <- unique(DImp1.1$ifam)
set.seed(32189)
unique_ifams <- sample(unique_ifams)
remainder<-length(unique_ifams)%%6
nfold <- (length(unique_ifams)-remainder)/6
gfold <- c(rep(1, times=nfold), rep(2, times=nfold), rep(3, times=nfold),
rep(4, times=nfold), rep(5, times=nfold), rep(6, times=nfold))
gfold <- c(gfold,1:remainder)
unique_ifams <- cbind(unique_ifams,gfold)
ifams<- as.data.frame(rbind(unique_ifams, unique_ifams))
colnames(ifams) <- c("ifam","gfold")
ifams$ID<- c(rep(1,times=nrow(unique_ifams)),rep(4,times=nrow(unique_ifams)))  # allocate ID for each twin (ID 1=older twin, ID 4= younger twin)
DImp1.1<- merge(DImp1.1,ifams, by=c("ifam","ID"), all.x = T, all.y = F)        #merge the gfold var with the data
summary(as.factor(originalifams$gfold==DImp1.1$gfold))
