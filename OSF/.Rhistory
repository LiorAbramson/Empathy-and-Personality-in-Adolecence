text=element_text(family="serif"))
#creating folds in the combined 11_13 dataset
#gfold1113 indicates the twin pair's fold in this analysis
ifams_1113 <- merge(DImp1.1[,c(1:2,which(colnames(DImp1.1)=="gfold"))],
D13Imp1.1[,c(1:2,which(colnames(D13Imp1.1)=="gfold"))],
by=c("ifam","ID"), all.x=T, all.y=T)
unique_ifams_1113 <- unique(ifams_1113$ifam)
set.seed(32189)
unique_ifams_1113 <- sample(unique_ifams_1113)
remainder<-length(unique_ifams_1113)%%6
nfold <- (length(unique_ifams_1113)-remainder)/6
gfold <- c(rep(1, times=nfold), rep(2, times=nfold), rep(3, times=nfold),
rep(4, times=nfold), rep(5, times=nfold), rep(6, times=nfold))
gfold <- c(gfold,1:remainder)
unique_ifams_1113 <- cbind(unique_ifams_1113,gfold)
ifams_1113<- as.data.frame(rbind(unique_ifams_1113, unique_ifams_1113))
colnames(ifams_1113) <- c("ifam","gfold1113")
ifams_1113$ID<- c(rep(1,times=nrow(unique_ifams_1113)),rep(4,times=nrow(unique_ifams_1113)))
DImp1.1<- merge(DImp1.1,ifams_1113, by=c("ifam","ID"), all.x = T, all.y = F)
D13Imp1.1<- merge(D13Imp1.1,ifams_1113, by=c("ifam","ID"), all.x = T, all.y = F)
#IMPORTANT NOTE: The random division to folds relies on participants ID numbers. Since IRB restrictions and confidentiality considerations prevent us from uploading the original ID numbers, the fold division that was used specifically in this analysis cannot be replicated with the above code (the separate age 11 and age 13 analyses do replicate with the new ID numbers).
#if you want to exactly replicate the results of this study, you will have to merge the original variable gfold1113 (indicating the fold division) from an external file. To do so, use the following merging code INSTEAD of the rows above (i.e., instead of the rows starting from "ifams_1113 <-merge...").
#code for exact replication
#  Age11_gfolds <- read.csv("~/Documents/projects/Empathy-Personality-Adolecence/OSF/data/Age11_gfold.csv")
#  Age13_gfolds <- read.csv("~/Documents/projects/Empathy-Personality-Adolecence/OSF/data/Age13_gfold.csv")
#  DImp1.1<- merge(DImp1.1,Age11_gfolds[,c("ifam","ID","gfold1113")], by=c("ifam","ID"), all.x = T, all.y = F)
#  D13Imp1.1<- merge(D13Imp1.1,Age13_gfolds[,c("ifam","ID","gfold1113")], by=c("ifam","ID"), all.x = T, all.y = F)
#adapting the Ridge function to the age 11-age 13 analysis
Ridge1113 <- function (DImp11,DImp13, gfold,relvar) {
#find the best lambda-
set.seed(10000)
#train set comes from age 11
cv_fit <- cv.glmnet(x=as.matrix(DImp11[DImp11$gfold1113 != gfold,relvar[2:45]]),
y=DImp11[DImp11$gfold1113 != gfold,relvar[1]],
alpha=0, lambda=NULL,nfolds=10)
opt_lambda <- cv_fit$lambda.min
opt_lambda_ind <- which(cv_fit$lambda==opt_lambda)
#what are the coefficients when the lambda is optimal
opt_coef <- as.matrix(cv_fit$glmnet.fit$beta[,opt_lambda_ind])
#after finding the best lambda, train the entire train set with that lambda
fit <- glmnet(x=as.matrix(DImp11[DImp11$gfold1113 != gfold,relvar[2:45]]),
y=DImp11[DImp11$gfold1113 != gfold,relvar[1]],
alpha = 0, lambda = opt_lambda)
#now check the prediction on the test set at age 13
y_pred <- predict(fit, s=opt_lambda,
newx = as.matrix(DImp13[DImp13$gfold1113 == gfold,relvar[2:45]]))
mse <- mean((DImp13[DImp13$gfold1113 == gfold,relvar[1]]-y_pred)^2)
assign ("fit",fit,envir = .GlobalEnv)
assign ("opt_lambda",opt_lambda,envir = .GlobalEnv)
assign ("opt_coef",opt_coef,envir = .GlobalEnv)
assign ("y_pred",y_pred,envir = .GlobalEnv)
assign ("mse",mse,envir = .GlobalEnv)
}
#emotional empathy
#doing Ridge regression on the folds
#fold 1
Ridge1113(DImp11=DImp1.1,DImp13=D13Imp1.1, gfold=1,
relvar=relvar_emotional)
fit_emo_1 <- fit
opt_lambda_emo_1 <- opt_lambda
opt_coef_emo_1 <- opt_coef
y_pred_emo_1 <- y_pred
mse_emo_1 <- mse
#fold 2
Ridge1113(DImp11=DImp1.1,DImp13=D13Imp1.1, gfold=2,
relvar=relvar_emotional)
fit_emo_2 <- fit
opt_lambda_emo_2 <- opt_lambda
opt_coef_emo_2 <- opt_coef
y_pred_emo_2 <- y_pred
mse_emo_2 <- mse
#fold 3
Ridge1113(DImp11=DImp1.1,DImp13=D13Imp1.1, gfold=3,
relvar=relvar_emotional)
fit_emo_3 <- fit
opt_lambda_emo_3 <- opt_lambda
opt_coef_emo_3 <- opt_coef
y_pred_emo_3 <- y_pred
mse_emo_3 <- mse
#fold 4
Ridge1113(DImp11=DImp1.1,DImp13=D13Imp1.1, gfold=4,
relvar=relvar_emotional)
fit_emo_4 <- fit
opt_lambda_emo_4 <- opt_lambda
opt_coef_emo_4 <- opt_coef
y_pred_emo_4 <- y_pred
mse_emo_4 <- mse
#fold 5
Ridge1113(DImp11=DImp1.1,DImp13=D13Imp1.1, gfold=5,
relvar=relvar_emotional)
fit_emo_5 <- fit
opt_lambda_emo_5 <- opt_lambda
opt_coef_emo_5 <- opt_coef
y_pred_emo_5 <- y_pred
mse_emo_5 <- mse
#fold 6
Ridge1113(DImp11=DImp1.1,DImp13=D13Imp1.1, gfold=6,
relvar=relvar_emotional)
fit_emo_6 <- fit
opt_lambda_emo_6 <- opt_lambda
opt_coef_emo_6 <- opt_coef
y_pred_emo_6 <- y_pred
mse_emo_6 <- mse
#computing the mean coefficients across the folds
opt_coef_emo_matrix <- as.data.frame(cbind (opt_coef_emo_1,
opt_coef_emo_2,
opt_coef_emo_3,
opt_coef_emo_4,
opt_coef_emo_5,
opt_coef_emo_6))
opt_coef_emo_matrix$aveCoef <- rowMeans(opt_coef_emo_matrix)
#finding the mean correlation between the outcome and the predicted value across the folds
cor_emo <-1:6
for (i in 1:6) {
cor_emo[i] <- cor.test(D13Imp1.1$EMPQ_emotional[D13Imp1.1$gfold1113 ==i],
eval(parse(text=paste0("y_pred_emo_",i))))[4]}
cor_emo <- as.numeric(cor_emo)
avecor_emo <- mean(cor_emo)   #mean correlation
aveR2_emo  <- avecor_emo^2    #mean R2
#computing the mean mse across the folds
mse_emo <-1:6
for (i in 1:6) { mse_emo[i] <- eval(parse(text=paste0("mse_emo_",i)))}
avemse_emo <- mean(mse_emo)
#cognitive empathy
#doing Ridge regression on the folds
#fold 1
Ridge1113(DImp11=DImp1.1,DImp13=D13Imp1.1, gfold=1,
relvar=relvar_cognitive)
fit_cog_1 <- fit
opt_lambda_cog_1 <- opt_lambda
opt_coef_cog_1 <- opt_coef
y_pred_cog_1 <- y_pred
mse_cog_1 <- mse
#fold 2
Ridge1113(DImp11=DImp1.1,DImp13=D13Imp1.1, gfold=2,
relvar=relvar_cognitive)
fit_cog_2 <- fit
opt_lambda_cog_2 <- opt_lambda
opt_coef_cog_2 <- opt_coef
y_pred_cog_2 <- y_pred
mse_cog_2 <- mse
#fold 3
Ridge1113(DImp11=DImp1.1,DImp13=D13Imp1.1, gfold=3,
relvar=relvar_cognitive)
fit_cog_3 <- fit
opt_lambda_cog_3 <- opt_lambda
opt_coef_cog_3 <- opt_coef
y_pred_cog_3 <- y_pred
mse_cog_3 <- mse
#fold 4
Ridge1113(DImp11=DImp1.1,DImp13=D13Imp1.1, gfold=4,
relvar=relvar_cognitive)
fit_cog_4 <- fit
opt_lambda_cog_4 <- opt_lambda
opt_coef_cog_4 <- opt_coef
y_pred_cog_4 <- y_pred
mse_cog_4 <- mse
#fold 5
Ridge1113(DImp11=DImp1.1,DImp13=D13Imp1.1, gfold=5,
relvar=relvar_cognitive)
fit_cog_5 <- fit
opt_lambda_cog_5 <- opt_lambda
opt_coef_cog_5 <- opt_coef
y_pred_cog_5 <- y_pred
mse_cog_5 <- mse
#fold 6
Ridge1113(DImp11=DImp1.1,DImp13=D13Imp1.1, gfold=6,
relvar=relvar_cognitive)
fit_cog_6 <- fit
opt_lambda_cog_6 <- opt_lambda
opt_coef_cog_6 <- opt_coef
y_pred_cog_6 <- y_pred
mse_cog_6 <- mse
#computing the mean coefficients across the folds
opt_coef_cog_matrix <- as.data.frame(cbind (opt_coef_cog_1,
opt_coef_cog_2,
opt_coef_cog_3,
opt_coef_cog_4,
opt_coef_cog_5,
opt_coef_cog_6))
opt_coef_cog_matrix$aveCoef <- rowMeans(opt_coef_cog_matrix)
#finding the mean correlation between outcome and predicted value across the folds
cor_cog <-1:6
for (i in 1:6) {
cor_cog[i] <- cor.test(D13Imp1.1$EMPQ_cognitive[D13Imp1.1$gfold1113 ==i],
eval(parse(text=paste0("y_pred_cog_",i))))[4]}
cor_cog <- as.numeric(cor_cog)
avecor_cog <- mean(cor_cog)   #mean correlation
aveR2_cog  <- avecor_cog^2    #mean R2
#computing the mean mse across the folds
mse_cog <-1:6
for (i in 1:6) { mse_cog[i] <- eval(parse(text=paste0("mse_cog_",i)))}
avemse_cog <- mean(mse_cog)
min(opt_lambda_cog11_1,opt_lambda_cog11_2,opt_lambda_cog11_3,opt_lambda_cog11_4,opt_lambda_cog11_5,opt_lambda_cog11_6,
opt_lambda_cog13_1,opt_lambda_cog13_2,opt_lambda_cog13_3,opt_lambda_cog13_4,opt_lambda_cog13_5,opt_lambda_cog13_6,
opt_lambda_emo11_1,opt_lambda_emo11_2,opt_lambda_emo11_3,opt_lambda_emo11_4,opt_lambda_emo11_5,opt_lambda_emo11_6,
opt_lambda_emo13_1,opt_lambda_emo13_2,opt_lambda_emo13_3,opt_lambda_emo13_4,opt_lambda_emo13_5,opt_lambda_emo13_6,
opt_lambda_cog_1,opt_lambda_cog_2,opt_lambda_cog_3,opt_lambda_cog_4,opt_lambda_cog_5,opt_lambda_cog_6,
opt_lambda_emo_1,opt_lambda_emo_2,opt_lambda_emo_3,opt_lambda_emo_4,opt_lambda_emo_5,opt_lambda_emo_6)
max(opt_lambda_cog11_1,opt_lambda_cog11_2,opt_lambda_cog11_3,opt_lambda_cog11_4,opt_lambda_cog11_5,opt_lambda_cog11_6,
opt_lambda_cog13_1,opt_lambda_cog13_2,opt_lambda_cog13_3,opt_lambda_cog13_4,opt_lambda_cog13_5,opt_lambda_cog13_6,
opt_lambda_emo11_1,opt_lambda_emo11_2,opt_lambda_emo11_3,opt_lambda_emo11_4,opt_lambda_emo11_5,opt_lambda_emo11_6,
opt_lambda_emo13_1,opt_lambda_emo13_2,opt_lambda_emo13_3,opt_lambda_emo13_4,opt_lambda_emo13_5,opt_lambda_emo13_6,
opt_lambda_cog_1,opt_lambda_cog_2,opt_lambda_cog_3,opt_lambda_cog_4,opt_lambda_cog_5,opt_lambda_cog_6,
opt_lambda_emo_1,opt_lambda_emo_2,opt_lambda_emo_3,opt_lambda_emo_4,opt_lambda_emo_5,opt_lambda_emo_6)
#age 11
#emotional empathy
set.seed(10000)
cv_fit_emo11 <- cv.glmnet(x=as.matrix(DImp1.1[,relvar_emotional[2:45]]),
y=DImp1.1[,relvar_emotional[1]],
alpha=0, lambda=NULL, nfolds=10)
opt_lambda_emo11 <- cv_fit_emo11$lambda.min
opt_lambda_ind_emo11 <- which(cv_fit_emo11$lambda==opt_lambda_emo11)
#what are the coefficients when the lambda is optimal
opt_coef_emo11_all <- as.matrix(cv_fit_emo11$glmnet.fit$beta[,opt_lambda_ind_emo11])
#after finding the best lambda, train the entire set (train and test sets are the same)
fit_emo11_all <- glmnet(x=as.matrix(DImp1.1[,relvar_emotional[2:45]]),
y=DImp1.1[,relvar_emotional[1]],
alpha = 0, lambda = opt_lambda_emo11)
#now check the prediction (notice that the training and testing sets are the same,
#so this is not exactly "prediction")
y_pred_emo11_all <- as.numeric(predict(fit_emo11_all, s=opt_lambda_emo11,
newx = as.matrix(DImp1.1[,relvar_emotional[2:45]])))
cor_emo11_all <- as.numeric (cor.test(DImp1.1$EMPQ_emotional, y_pred_emo11_all)[4])
R2_emo11_all  <- cor_emo11_all^2
mse_emo11_all <- mean((DImp1.1[,relvar_emotional[1]]-y_pred_emo11_all)^2)
#attaching the predicted values to the dataset
DImp1.1$predicted_emotional_11 <- y_pred_emo11_all
#age 11
#cognitive empathy
set.seed(10000)
cv_fit_cog11 <- cv.glmnet(x=as.matrix(DImp1.1[,relvar_cognitive[2:45]]),
y=DImp1.1[,relvar_cognitive[1]],
alpha=0, lambda=NULL, nfolds=10)
opt_lambda_cog11 <- cv_fit_cog11$lambda.min
opt_lambda_ind_cog11 <- which(cv_fit_cog11$lambda==opt_lambda_cog11)
#what are the coefficients when the lambda is optimal
opt_coef_cog11_all <- as.matrix(cv_fit_cog11$glmnet.fit$beta[,opt_lambda_ind_cog11])
#after finding the best lambda, train the entire set (train and test sets are the same)
fit_cog11_all <- glmnet(x=as.matrix(DImp1.1[,relvar_cognitive[2:45]]),
y=DImp1.1[,relvar_cognitive[1]],
alpha = 0, lambda = opt_lambda_cog11)
#now check the prediction (notice that the training and testing sets are the same,
#so this is not exactly "prediction")
y_pred_cog11_all <- as.numeric(predict(fit_cog11_all, s=opt_lambda_cog11,
newx = as.matrix(DImp1.1[,relvar_cognitive[2:45]])))
cor_cog11_all <- as.numeric (cor.test(DImp1.1$EMPQ_cognitive, y_pred_cog11_all)[4])
R2_cog11_all  <- cor_cog11_all^2
mse_cog11_all <- mean((DImp1.1[,relvar_cognitive[1]]-y_pred_cog11_all)^2)
#attaching the predicted values to the dataset
DImp1.1$predicted_cognitive_11 <- y_pred_cog11_all
#age 13
#emotional empathy
set.seed(10000)
cv_fit_emo13 <- cv.glmnet(x=as.matrix(D13Imp1.1[,relvar_emotional_13[2:45]]),
y=D13Imp1.1[,relvar_emotional_13[1]],
alpha=0, lambda=NULL, nfolds=10)
opt_lambda_emo13 <- cv_fit_emo13$lambda.min
opt_lambda_ind_emo13 <- which(cv_fit_emo13$lambda==opt_lambda_emo13)
#what are the coefficients when the lambda is optimal
opt_coef_emo13_all <- as.matrix(cv_fit_emo13$glmnet.fit$beta[,opt_lambda_ind_emo13])
#after finding the best lambda, train the entire set (train and test sets are the same)
fit_emo13_all <- glmnet(x=as.matrix(D13Imp1.1[,relvar_emotional_13[2:45]]),
y=D13Imp1.1[,relvar_emotional_13[1]],
alpha = 0, lambda = opt_lambda_emo13)
#now check the prediction (notice that the training and testing sets are the same,
#so this is not exactly "prediction")
y_pred_emo13_all <- as.numeric(predict(fit_emo13_all, s=opt_lambda_emo13,
newx = as.matrix(D13Imp1.1[,relvar_emotional_13[2:45]])))
cor_emo13_all <- as.numeric (cor.test(D13Imp1.1$EMPQ_emotional, y_pred_emo13_all)[4])
R2_emo13_all  <- cor_emo13_all^2
mse_emo13_all <- mean((D13Imp1.1[,relvar_emotional_13[1]]-y_pred_emo13_all)^2)
#attaching the predicted values to the dataset
D13Imp1.1$predicted_emotional_13 <- y_pred_emo13_all
#cognitive empathy
set.seed(10000)
cv_fit_cog13 <- cv.glmnet(x=as.matrix(D13Imp1.1[,relvar_cognitive_13[2:45]]),
y=D13Imp1.1[,relvar_cognitive_13[1]],
alpha=0, lambda=NULL, nfolds=10)
opt_lambda_cog13 <- cv_fit_cog13$lambda.min
opt_lambda_ind_cog13 <- which(cv_fit_cog13$lambda==opt_lambda_cog13)
#what are the coefficients when the lambda is optimal
opt_coef_cog13_all <- as.matrix(cv_fit_cog13$glmnet.fit$beta[,opt_lambda_ind_cog13])
#after finding the best lambda, train the entire set (train and test sets are the same)
fit_cog13_all <- glmnet(x=as.matrix(D13Imp1.1[,relvar_cognitive_13[2:45]]),
y=D13Imp1.1[,relvar_cognitive_13[1]],
alpha = 0, lambda = opt_lambda_cog13)
#now check the prediction (notice that because the training and testing sets are the same
#this is not exactly "prediction")
y_pred_cog13_all <- as.numeric(predict(fit_cog13_all, s=opt_lambda_cog13,
newx = as.matrix(D13Imp1.1[,relvar_cognitive_13[2:45]])))
cor_cog13_all <- as.numeric (cor.test(D13Imp1.1$EMPQ_cognitive, y_pred_cog13_all)[4])
R2_cog13_all  <- cor_cog13_all^2
mse_cog13_all <- mean((D13Imp1.1[,relvar_cognitive_13[1]]-y_pred_cog13_all)^2)
#attaching the predicted values to the dataset
D13Imp1.1$predicted_cognitive_13 <- y_pred_cog13_all
#Examining the relation between the entire data analysis and the cross-validation analysis
#(reported in the supplementary materials)
#relation between items coefficients
cor.test(opt_coef_emo11_all,opt_coef_emo11_matrix$aveCoef)
cor.test(opt_coef_cog11_all,opt_coef_cog11_matrix$aveCoef)
cor.test(opt_coef_emo13_all,opt_coef_emo13_matrix$aveCoef)
cor.test(opt_coef_cog13_all,opt_coef_cog13_matrix$aveCoef)
#all > .99
#relation between predictive scores- emotional empathy age 11
#organize all the predicted values from the cross-validation analysis into one variable
y_pred_emo11_1_mat <- cbind(DImp1.1[DImp1.1$gfold==1,1:2], y_pred_emo11_1)
y_pred_emo11_2_mat <- cbind(DImp1.1[DImp1.1$gfold==2,1:2], y_pred_emo11_2)
y_pred_emo11_3_mat <- cbind(DImp1.1[DImp1.1$gfold==3,1:2], y_pred_emo11_3)
y_pred_emo11_4_mat <- cbind(DImp1.1[DImp1.1$gfold==4,1:2], y_pred_emo11_4)
y_pred_emo11_5_mat <- cbind(DImp1.1[DImp1.1$gfold==5,1:2], y_pred_emo11_5)
y_pred_emo11_6_mat <- cbind(DImp1.1[DImp1.1$gfold==6,1:2], y_pred_emo11_6)
y_pred_emo11_mat <- rbind(y_pred_emo11_1_mat,
y_pred_emo11_2_mat,
y_pred_emo11_3_mat,
y_pred_emo11_4_mat,
y_pred_emo11_5_mat,
y_pred_emo11_6_mat)
colnames(y_pred_emo11_mat)[3] <- "predictedKfold"
y_pred_emo11_mat <- merge(y_pred_emo11_mat,
DImp1.1[,c(1:2, which(colnames(DImp1.1)=="predicted_emotional_11"))],
all.x=T, all.y=T)
#now check the correlation
cor.test(y_pred_emo11_mat$predictedKfold,y_pred_emo11_mat$predicted_emotional_11)
#relation between predictive scores- cognitive empathy age 11
#organize all the predicted values from the cross-validation analysis into one variable
y_pred_cog11_1_mat <- cbind(DImp1.1[DImp1.1$gfold==1,1:2], y_pred_cog11_1)
y_pred_cog11_2_mat <- cbind(DImp1.1[DImp1.1$gfold==2,1:2], y_pred_cog11_2)
y_pred_cog11_3_mat <- cbind(DImp1.1[DImp1.1$gfold==3,1:2], y_pred_cog11_3)
y_pred_cog11_4_mat <- cbind(DImp1.1[DImp1.1$gfold==4,1:2], y_pred_cog11_4)
y_pred_cog11_5_mat <- cbind(DImp1.1[DImp1.1$gfold==5,1:2], y_pred_cog11_5)
y_pred_cog11_6_mat <- cbind(DImp1.1[DImp1.1$gfold==6,1:2], y_pred_cog11_6)
y_pred_cog11_mat <- rbind(y_pred_cog11_1_mat,
y_pred_cog11_2_mat,
y_pred_cog11_3_mat,
y_pred_cog11_4_mat,
y_pred_cog11_5_mat,
y_pred_cog11_6_mat)
colnames(y_pred_cog11_mat)[3] <- "predictedKfold"
y_pred_cog11_mat <- merge(y_pred_cog11_mat,
DImp1.1[,c(1:2, which(colnames(DImp1.1)=="predicted_cognitive_11"))],
all.x=T, all.y=T)
#now check the correlation
cor.test(y_pred_cog11_mat$predictedKfold,y_pred_cog11_mat$predicted_cognitive_11)
#relation between predictive scores- emotional empathy age 13
#organize all the predicted values from the cross-validation analysis into one variable
y_pred_emo13_1_mat <- cbind(D13Imp1.1[D13Imp1.1$gfold==1,1:2], y_pred_emo13_1)
y_pred_emo13_2_mat <- cbind(D13Imp1.1[D13Imp1.1$gfold==2,1:2], y_pred_emo13_2)
y_pred_emo13_3_mat <- cbind(D13Imp1.1[D13Imp1.1$gfold==3,1:2], y_pred_emo13_3)
y_pred_emo13_4_mat <- cbind(D13Imp1.1[D13Imp1.1$gfold==4,1:2], y_pred_emo13_4)
y_pred_emo13_5_mat <- cbind(D13Imp1.1[D13Imp1.1$gfold==5,1:2], y_pred_emo13_5)
y_pred_emo13_6_mat <- cbind(D13Imp1.1[D13Imp1.1$gfold==6,1:2], y_pred_emo13_6)
y_pred_emo13_mat <- rbind(y_pred_emo13_1_mat,
y_pred_emo13_2_mat,
y_pred_emo13_3_mat,
y_pred_emo13_4_mat,
y_pred_emo13_5_mat,
y_pred_emo13_6_mat)
colnames(y_pred_emo13_mat)[3] <- "predictedKfold"
y_pred_emo13_mat <- merge(y_pred_emo13_mat,
D13Imp1.1[,c(1:2, which(colnames(D13Imp1.1)=="predicted_emotional_13"))],
all.x=T, all.y=T)
#now check the correlation
cor.test(y_pred_emo13_mat$predictedKfold,y_pred_emo13_mat$predicted_emotional_13)
#relation between predictive scores- cognitive empathy age 13
#organize all the predicted values from the cross-validation analysis into one variable
y_pred_cog13_1_mat <- cbind(D13Imp1.1[D13Imp1.1$gfold==1,1:2], y_pred_cog13_1)
y_pred_cog13_2_mat <- cbind(D13Imp1.1[D13Imp1.1$gfold==2,1:2], y_pred_cog13_2)
y_pred_cog13_3_mat <- cbind(D13Imp1.1[D13Imp1.1$gfold==3,1:2], y_pred_cog13_3)
y_pred_cog13_4_mat <- cbind(D13Imp1.1[D13Imp1.1$gfold==4,1:2], y_pred_cog13_4)
y_pred_cog13_5_mat <- cbind(D13Imp1.1[D13Imp1.1$gfold==5,1:2], y_pred_cog13_5)
y_pred_cog13_6_mat <- cbind(D13Imp1.1[D13Imp1.1$gfold==6,1:2], y_pred_cog13_6)
y_pred_cog13_mat <- rbind(y_pred_cog13_1_mat,
y_pred_cog13_2_mat,
y_pred_cog13_3_mat,
y_pred_cog13_4_mat,
y_pred_cog13_5_mat,
y_pred_cog13_6_mat)
colnames(y_pred_cog13_mat)[3] <- "predictedKfold"
y_pred_cog13_mat <- merge(y_pred_cog13_mat,
D13Imp1.1[,c(1:2, which(colnames(D13Imp1.1)=="predicted_cognitive_13"))],
all.x=T, all.y=T)
#now check the correlation
cor.test(y_pred_cog13_mat$predictedKfold,y_pred_cog13_mat$predicted_cognitive_13)
cor_emo11_all
cor_emo11_all^2
mse_emo11_all
cor_cog11_all
cor_cog11_all^2
mse_cog11_all
cor_emo13_all
cor_emo13_all^3
cor_emo13_all^2
mse_emo13_all
cor_cog13_all
cor_cog13_all^2
mse_cog13_all
#changing names to include age
DImp1.1 <- rename(DImp1.1, c(EMPQ_emotional="EMPQ_emotional_11",
EMPQ_cognitive="EMPQ_cognitive_11",
EMPQ_IRI_motiv="EMPQ_IRI_motiv_11"))
D13Imp1.1 <- rename(D13Imp1.1, c(EMPQ_emotional="EMPQ_emotional_13",
EMPQ_cognitive="EMPQ_cognitive_13",
EMPQ_IRI_motiv="EMPQ_IRI_motiv_13"))
#import general unidentified participants details of the Longitudinal Israeli Study of Twins
participants_details <- read.csv ("~/Documents/projects/Empathy-Personality-Adolecence/OSF/data/participants_details.csv")
col <- colnames((participants_details))
relvar_participants_details <- c(which (col=="ifam"), which (col=="ID"),
which (col=="sex"), which (col=="zygosity"),which (col=="zygoAcc3"))
col <- colnames((D))
relvar_more_details_11 <- c(which (col=="ifam"), which (col=="ID"), which (col=="OnlineManual"))
col <- colnames((DImp1.1))
relvar_D11 <-  c(which (col=="ifam"), which (col=="ID"),
which(col=="EMPQ_emotional_11"), which(col=="EMPQ_cognitive_11"),
which(col=="predicted_emotional_11"), which(col=="predicted_cognitive_11"))
col <- colnames((D13))
relvar_more_details_13 <- c(which (col=="ifam"), which (col=="ID"), which (col=="OnlineManual13"))
col <- colnames((D13Imp1.1))
relvar_D13 <-  c(which (col=="ifam"), which (col=="ID"),
which(col=="EMPQ_emotional_13"), which(col=="EMPQ_cognitive_13"),
which(col=="predicted_emotional_13"), which(col=="predicted_cognitive_13"))
#merge final vars from all datasets
Dfinal11 <- merge (D[,relvar_more_details_11],DImp1.1[,relvar_D11], by=c("ifam","ID"), all.y = T)
Dfinal13 <- merge (D13[,relvar_more_details_13],D13Imp1.1[,relvar_D13], by=c("ifam","ID"), all.y = T)
Dfinal_11_13 <- merge(Dfinal11,Dfinal13, by=c("ifam","ID"), all.x=T, all.y=T)
Dfinal_11_13 <- merge(Dfinal_11_13, participants_details[,relvar_participants_details],
by=c("ifam","ID"), all.x=T, all.y=F)
#export to csv
write.csv(Dfinal_11_13,row.names=F,"~/Documents/projects/Empathy-Personality-Adolecence/OSF/data/Dfinal_11_13.csv")
#import data (called panel sample)
DPan <- read.csv ("~/Documents/projects/Empathy-Personality-Adolecence/OSF/data/panel_results_PerEmp.csv")
#reversing items
CreateReverseItems_allData_panel <-function(DPan) {
DPan$BFI6_Rev <- 6-DPan$BFI6
DPan$BFI21_Rev <- 6-DPan$BFI21
DPan$BFI31_Rev <- 6-DPan$BFI31
DPan$BFI2_Rev <- 6-DPan$BFI2
DPan$BFI12_Rev <- 6-DPan$BFI12
DPan$BFI27_Rev <- 6-DPan$BFI27
DPan$BFI37_Rev <- 6-DPan$BFI37
DPan$BFI8_Rev <- 6-DPan$BFI8
DPan$BFI18_Rev <- 6-DPan$BFI18
DPan$BFI23_Rev <- 6-DPan$BFI23
DPan$BFI43_Rev <- 6-DPan$BFI43
DPan$BFI9_Rev <- 6-DPan$BFI9
DPan$BFI24_Rev <- 6-DPan$BFI24
DPan$BFI34_Rev <- 6-DPan$BFI34
DPan$BFI35_Rev <- 6-DPan$BFI35
DPan$BFI41_Rev <- 6-DPan$BFI41
assign ("DPan",DPan,envir = .GlobalEnv)
}
CreateReverseItems_allData_panel (DPan)
#remove children who are too young (elementary school)
DPan <- DPan[DPan$isOut==0,]
col <- colnames(DPan)
relvar_emotional_panel <- c(which (col=="EMPQ_emotional"),
which (col=="BFI1"), which (col=="BFI2_Rev"), which (col=="BFI3"),which (col=="BFI4"),
which (col=="BFI5"),which (col=="BFI6_Rev"),which (col=="BFI7"),which (col=="BFI8_Rev"),
which (col=="BFI9_Rev"),which (col=="BFI10"),which (col=="BFI11"),which (col=="BFI12_Rev"),
which (col=="BFI13"),which (col=="BFI14"),which (col=="BFI15"),which (col=="BFI16"),
which (col=="BFI17"),which (col=="BFI18_Rev"),which (col=="BFI19"),which (col=="BFI20"),
which (col=="BFI21_Rev"),which (col=="BFI22"),which (col=="BFI23_Rev"),which (col=="BFI24_Rev"),
which (col=="BFI25"),which (col=="BFI26"),which (col=="BFI27_Rev"),which (col=="BFI28"),
which (col=="BFI29"),which (col=="BFI30"),which (col=="BFI31_Rev"),which (col=="BFI32"),
which (col=="BFI33"),which (col=="BFI34_Rev"),which (col=="BFI35_Rev"),which (col=="BFI36"),
which (col=="BFI37_Rev"),which (col=="BFI38"),which (col=="BFI39"),which (col=="BFI40"),
which (col=="BFI41_Rev"),which (col=="BFI42"),which (col=="BFI43_Rev"),which (col=="BFI44"))
relvar_cognitive_panel <- c(which(col=="EMPQ_cognitive"),
which (col=="BFI1"), which (col=="BFI2_Rev"), which (col=="BFI3"),which (col=="BFI4"),
which (col=="BFI5"),which (col=="BFI6_Rev"),which (col=="BFI7"),which (col=="BFI8_Rev"),
which (col=="BFI9_Rev"),which (col=="BFI10"),which (col=="BFI11"),which (col=="BFI12_Rev"),
which (col=="BFI13"),which (col=="BFI14"),which (col=="BFI15"),which (col=="BFI16"),
which (col=="BFI17"),which (col=="BFI18_Rev"),which (col=="BFI19"),which (col=="BFI20"),
which (col=="BFI21_Rev"),which (col=="BFI22"),which (col=="BFI23_Rev"),which (col=="BFI24_Rev"),
which (col=="BFI25"),which (col=="BFI26"),which (col=="BFI27_Rev"),which (col=="BFI28"),
which (col=="BFI29"),which (col=="BFI30"),which (col=="BFI31_Rev"),which (col=="BFI32"),
which (col=="BFI33"),which (col=="BFI34_Rev"),which (col=="BFI35_Rev"),which (col=="BFI36"),
which (col=="BFI37_Rev"),which (col=="BFI38"),which (col=="BFI39"),which (col=="BFI40"),
which (col=="BFI41_Rev"),which (col=="BFI42"),which (col=="BFI43_Rev"),which (col=="BFI44"))
#scale all the BFI items so they all will have mean=0 and SD=1
for (i in 2:45) {DPan[,relvar_emotional_panel[i]] <-
scale(DPan[,relvar_emotional_panel[i]], scale=T)}
#check prediction of age 11 model- use the model that was done on the entire sample
#emotional empathy
y_pred_emo_panel <- predict(fit_emo11_all, s=opt_lambda_emo11,
newx = as.matrix(DPan[,relvar_emotional_panel[2:45]]))
cor_panel_emo11<- cor.test(DPan$EMPQ_emotional, y_pred_emo_panel)
R2_panel_emo11 <- as.numeric(cor_panel_emo11$estimate)^2
mse_panel_emo11 <- mean((DPan[,relvar_emotional_panel[1]]-y_pred_emo_panel)^2)
#cognitive empathy
y_pred_cog_panel <- predict(fit_cog11_all, s=opt_lambda_cog11,
newx = as.matrix(DPan[,relvar_cognitive_panel[2:45]]))
cor_panel_cog11 <- cor.test(DPan$EMPQ_cognitive, y_pred_cog_panel)
R2_panel_cog11 <- as.numeric(cor_panel_cog11$estimate)^2
mse_panel_cog11 <- mean((DPan[,relvar_cognitive_panel[1]]-y_pred_cog_panel)^2)
#check the prediction of the age 13 model - use the model that was done on the entire sample
#emotional empathy
y_pred_emo13_panel <- predict(fit_emo13_all, s=opt_lambda_emo13,
newx = as.matrix(DPan[,relvar_emotional_panel[2:45]]))
cor_panel_emo13 <- cor.test(DPan$EMPQ_emotional, y_pred_emo13_panel)
R2_panel_emo13  <- as.numeric(cor_panel_emo13$estimate)^2
mse_panel_emo13 <- mean((DPan[,relvar_emotional_panel[1]]-y_pred_emo13_panel)^2)
#cognitive empathy
y_pred_cog13_panel <- predict(fit_cog13_all, s=opt_lambda_cog13,
newx = as.matrix(DPan[,relvar_cognitive_panel[2:45]]))
cor_panel_cog13 <- cor.test(DPan$EMPQ_cognitive, y_pred_cog13_panel)
R2_panel_cog13  <- as.numeric(cor_panel_cog13$estimate)^2
mse_panel_cog13 <- mean((DPan[,relvar_cognitive_panel[1]]-y_pred_cog13_panel)^2)
cor_panel_cog11
cor_panel_cog11^2
R2_panel_cog11
R2_panel_cog13
