y_pred_cog13_4_mat <- cbind(D13Imp1.1[D13Imp1.1$gfold==4,1:2], y_pred_cog13_4)
y_pred_cog13_5_mat <- cbind(D13Imp1.1[D13Imp1.1$gfold==5,1:2], y_pred_cog13_5)
y_pred_cog13_6_mat <- cbind(D13Imp1.1[D13Imp1.1$gfold==6,1:2], y_pred_cog13_6)
y_pred_cog13_mat <- rbind(y_pred_cog13_1_mat,
y_pred_cog13_2_mat,
y_pred_cog13_3_mat,
y_pred_cog13_4_mat,
y_pred_cog13_5_mat,
y_pred_cog13_6_mat)
colnames(y_pred_cog13_mat)[3] <- "predictedKfold"
y_pred_cog13_mat <- merge(y_pred_cog13_mat,
D13Imp1.1[,c(1:2, which(colnames(D13Imp1.1)=="predicted_cognitive_13"))],
all.x=T, all.y=T)
#now check the correlation
cor.test(y_pred_cog13_mat$predictedKfold,y_pred_cog13_mat$predicted_cognitive_13)
#########################################################################################
###### Exporting the variables to csv for further analyses ##############################
#########################################################################################
#changing names to include age
DImp1.1 <- rename(DImp1.1, c(EMPQ_emotional="EMPQ_emotional_11",
EMPQ_cognitive="EMPQ_cognitive_11",
EMPQ_IRI_motiv="EMPQ_IRI_motiv_11"))
D13Imp1.1 <- rename(D13Imp1.1, c(EMPQ_emotional="EMPQ_emotional_13",
EMPQ_cognitive="EMPQ_cognitive_13",
EMPQ_IRI_motiv="EMPQ_IRI_motiv_13"))
#import general unidentified participants details of the Longitudinal Israeli Study of Twins
participants_details <- read.csv ("~/Documents/projects/Empathy-Personality-Adolecence/OSF/data/participants_details.csv")
col <- colnames((participants_details))
relvar_participants_details <- c(which (col=="ifam"), which (col=="ID"),
which (col=="sex"), which (col=="zygosity"),which (col=="zygoAcc3"))
col <- colnames((D))
relvar_more_details_11 <- c(which (col=="ifam"), which (col=="ID"), which (col=="OnlineManual"))
col <- colnames((DImp1.1))
relvar_D11 <-  c(which (col=="ifam"), which (col=="ID"),
which(col=="EMPQ_emotional_11"), which(col=="EMPQ_cognitive_11"),
which(col=="predicted_emotional_11"), which(col=="predicted_cognitive_11"))
col <- colnames((D13))
relvar_more_details_13 <- c(which (col=="ifam"), which (col=="ID"), which (col=="OnlineManual13"))
col <- colnames((D13Imp1.1))
relvar_D13 <-  c(which (col=="ifam"), which (col=="ID"),
which(col=="EMPQ_emotional_13"), which(col=="EMPQ_cognitive_13"),
which(col=="predicted_emotional_13"), which(col=="predicted_cognitive_13"))
#merge final vars from all datasets
Dfinal11 <- merge (D[,relvar_more_details_11],DImp1.1[,relvar_D11], by=c("ifam","ID"), all.y = T)
Dfinal13 <- merge (D13[,relvar_more_details_13],D13Imp1.1[,relvar_D13], by=c("ifam","ID"), all.y = T)
Dfinal_11_13 <- merge(Dfinal11,Dfinal13, by=c("ifam","ID"), all.x=T, all.y=T)
Dfinal_11_13 <- merge(Dfinal_11_13, participants_details[,relvar_participants_details],
by=c("ifam","ID"), all.x=T, all.y=F)
#export to csv
write.csv(Dfinal_11_13,row.names=F,"~/Documents/projects/Empathy-Personality-Adolecence/OSF/data/Dfinal_11_13.csv")
#############################################################################################
###### check the model prediction on an independent, non-twin sample ########################
#############################################################################################
#import data (called panel sample)
DPan <- read.csv ("~/Documents/projects/Empathy-Personality-Adolecence/OSF/data/panel_results_PerEmp.csv")
#reversing items
CreateReverseItems_allData_panel <-function(DPan) {
DPan$BFI6_Rev <- 6-DPan$BFI6
DPan$BFI21_Rev <- 6-DPan$BFI21
DPan$BFI31_Rev <- 6-DPan$BFI31
DPan$BFI2_Rev <- 6-DPan$BFI2
DPan$BFI12_Rev <- 6-DPan$BFI12
DPan$BFI27_Rev <- 6-DPan$BFI27
DPan$BFI37_Rev <- 6-DPan$BFI37
DPan$BFI8_Rev <- 6-DPan$BFI8
DPan$BFI18_Rev <- 6-DPan$BFI18
DPan$BFI23_Rev <- 6-DPan$BFI23
DPan$BFI43_Rev <- 6-DPan$BFI43
DPan$BFI9_Rev <- 6-DPan$BFI9
DPan$BFI24_Rev <- 6-DPan$BFI24
DPan$BFI34_Rev <- 6-DPan$BFI34
DPan$BFI35_Rev <- 6-DPan$BFI35
DPan$BFI41_Rev <- 6-DPan$BFI41
assign ("DPan",DPan,envir = .GlobalEnv)
}
CreateReverseItems_allData_panel (DPan)
#remove children who are too young (elementary school)
DPan <- DPan[DPan$isOut==0,]
col <- colnames(DPan)
relvar_emotional_panel <- c(which (col=="EMPQ_emotional"),
which (col=="BFI1"), which (col=="BFI2_Rev"), which (col=="BFI3"),which (col=="BFI4"),
which (col=="BFI5"),which (col=="BFI6_Rev"),which (col=="BFI7"),which (col=="BFI8_Rev"),
which (col=="BFI9_Rev"),which (col=="BFI10"),which (col=="BFI11"),which (col=="BFI12_Rev"),
which (col=="BFI13"),which (col=="BFI14"),which (col=="BFI15"),which (col=="BFI16"),
which (col=="BFI17"),which (col=="BFI18_Rev"),which (col=="BFI19"),which (col=="BFI20"),
which (col=="BFI21_Rev"),which (col=="BFI22"),which (col=="BFI23_Rev"),which (col=="BFI24_Rev"),
which (col=="BFI25"),which (col=="BFI26"),which (col=="BFI27_Rev"),which (col=="BFI28"),
which (col=="BFI29"),which (col=="BFI30"),which (col=="BFI31_Rev"),which (col=="BFI32"),
which (col=="BFI33"),which (col=="BFI34_Rev"),which (col=="BFI35_Rev"),which (col=="BFI36"),
which (col=="BFI37_Rev"),which (col=="BFI38"),which (col=="BFI39"),which (col=="BFI40"),
which (col=="BFI41_Rev"),which (col=="BFI42"),which (col=="BFI43_Rev"),which (col=="BFI44"))
relvar_cognitive_panel <- c(which(col=="EMPQ_cognitive"),
which (col=="BFI1"), which (col=="BFI2_Rev"), which (col=="BFI3"),which (col=="BFI4"),
which (col=="BFI5"),which (col=="BFI6_Rev"),which (col=="BFI7"),which (col=="BFI8_Rev"),
which (col=="BFI9_Rev"),which (col=="BFI10"),which (col=="BFI11"),which (col=="BFI12_Rev"),
which (col=="BFI13"),which (col=="BFI14"),which (col=="BFI15"),which (col=="BFI16"),
which (col=="BFI17"),which (col=="BFI18_Rev"),which (col=="BFI19"),which (col=="BFI20"),
which (col=="BFI21_Rev"),which (col=="BFI22"),which (col=="BFI23_Rev"),which (col=="BFI24_Rev"),
which (col=="BFI25"),which (col=="BFI26"),which (col=="BFI27_Rev"),which (col=="BFI28"),
which (col=="BFI29"),which (col=="BFI30"),which (col=="BFI31_Rev"),which (col=="BFI32"),
which (col=="BFI33"),which (col=="BFI34_Rev"),which (col=="BFI35_Rev"),which (col=="BFI36"),
which (col=="BFI37_Rev"),which (col=="BFI38"),which (col=="BFI39"),which (col=="BFI40"),
which (col=="BFI41_Rev"),which (col=="BFI42"),which (col=="BFI43_Rev"),which (col=="BFI44"))
#scale all the BFI items so they all will have mean=0 and SD=1
for (i in 2:45) {DPan[,relvar_emotional_panel[i]] <-
scale(DPan[,relvar_emotional_panel[i]], scale=T)}
#check prediction of age 11 model- use the model that was done on the entire sample
#emotional empathy
y_pred_emo_panel <- predict(fit_emo11_all, s=opt_lambda_emo11,
newx = as.matrix(DPan[,relvar_emotional_panel[2:45]]))
cor_panel_emo11<- cor.test(DPan$EMPQ_emotional, y_pred_emo_panel)
R2_panel_emo11 <- as.numeric(cor_panel_emo11$estimate)^2
mse_panel_emo11 <- mean((DPan[,relvar_emotional_panel[1]]-y_pred_emo_panel)^2)
#cognitive empathy
y_pred_cog_panel <- predict(fit_cog11_all, s=opt_lambda_cog11,
newx = as.matrix(DPan[,relvar_cognitive_panel[2:45]]))
cor_panel_cog11 <- cor.test(DPan$EMPQ_cognitive, y_pred_cog_panel)
R2_panel_cog11 <- as.numeric(cor_panel_cog11$estimate)^2
mse_panel_cog11 <- mean((DPan[,relvar_cognitive_panel[1]]-y_pred_cog_panel)^2)
#check the prediction of the age 13 model - use the model that was done on the entire sample
#emotional empathy
y_pred_emo13_panel <- predict(fit_emo13_all, s=opt_lambda_emo13,
newx = as.matrix(DPan[,relvar_emotional_panel[2:45]]))
cor_panel_emo13 <- cor.test(DPan$EMPQ_emotional, y_pred_emo13_panel)
R2_panel_emo13  <- as.numeric(cor_panel_emo13$estimate)^2
mse_panel_emo13 <- mean((DPan[,relvar_emotional_panel[1]]-y_pred_emo13_panel)^2)
#cognitive empathy
y_pred_cog13_panel <- predict(fit_cog13_all, s=opt_lambda_cog13,
newx = as.matrix(DPan[,relvar_cognitive_panel[2:45]]))
cor_panel_cog13 <- cor.test(DPan$EMPQ_cognitive, y_pred_cog13_panel)
R2_panel_cog13  <- as.numeric(cor_panel_cog13$estimate)^2
mse_panel_cog13 <- mean((DPan[,relvar_cognitive_panel[1]]-y_pred_cog13_panel)^2)
hist (PermutVector_emo11[1,]) #see the distribution of the correlations
hist (PermutVector_emo11[2,]) #see the distribution of the mse
hist (PermutVector_emo11[3,]) #see the distribution of the maximal item coefficient
realCor_emo11 <- avecor_emo11
proportionCor_emo11 <- sum (realCor_emo11 > PermutVector_emo11[1,] )
realMSE_emo11 <- avemse_emo11
proportionMSE_emo11 <- sum (realMSE_emo11 < PermutVector_emo11[2,] )
#define the real coefficient of each item (in absolute values)
realCoef_emo11 <- abs(opt_coef_emo11_matrix$aveCoef)
#count the number of permutations where the real coefficient is higher than the maximal permuted coefficient
proportionCoef_emo11 <- matrix(nrow=1,ncol=44)
for (i in 1:44){
proportionCoef_emo11[i] <- sum (realCoef_emo11[i] > PermutVector_emo11[3,])}
#what coefficients are higher than the maximal value in 99% and 95% of the cases?
proportionCoef_emo11_sig05 <- proportionCoef_emo11 > 9500
proportionCoef_emo11_sig01 <- proportionCoef_emo11 > 9900
#ADD ONLY THIS PART AS IT MARKS ALSO .05
#FOR SUPPLEMENTRY- add the significance at p <.05 to the plots and adjust the graph limits
opt_coef_emo11_matrix$star05 <- ifelse(t(proportionCoef_emo11_sig01)==T,"**",
ifelse (t(proportionCoef_emo11_sig05)==T,"*",""))
plotemo11 + geom_text(data = opt_coef_emo11_matrix,
label = opt_coef_emo11_matrix$star05, nudge_y = 0)+ ylim(-.03, .13)
View(BFI_labels)
proportionCoef_emo11
View(opt_coef)
View(opt_coef_cog_matrix)
View(opt_coef_emo_matrix)
View(opt_coef_emo11_matrix)
hist (PermutVector_cog11[1,]) #see the distribution of the correlations
hist (PermutVector_cog11[2,]) #see the distribution of the mse
hist (PermutVector_cog11[3,]) #see the distribution of the maximal item coefficient
realCor_cog11 <- avecor_cog11
proportionCor_cog11 <- sum (realCor_cog11 > PermutVector_cog11[1,] )
proportionCor_cog11
realMSE_cog11 <- avemse_cog11
realMSE_cog11
proportionMSE_cog11 <- sum (realMSE_cog11 < PermutVector_cog11[2,] )
proportionMSE_cog11
#define the real coefficients of each item (in absolute values)
realCoef_cog11 <- abs(opt_coef_cog11_matrix$aveCoef)
proportionCoef_cog11 <- matrix(nrow=1,ncol=44)
for (i in 1:44){
proportionCoef_cog11[i] <- sum (realCoef_cog11[i] > PermutVector_cog11_withCoef[3,])}
proportionCoef_cog11 <- matrix(nrow=1,ncol=44)
for (i in 1:44){
proportionCoef_cog11[i] <- sum (realCoef_cog11[i] > PermutVector_cog11[3,])}
proportionCoef_cog11
#what coefficients are higher than the maximal value in 95% of the cases?
proportionCoef_cog11_sig05 <- proportionCoef_cog11 > 9500
proportionCoef_cog11_sig01 <- proportionCoef_cog11 > 9900
#add the significance level to the plots and adjust the graph limits
opt_coef_cog11_matrix$star05 <- ifelse(t(proportionCoef_cog11_sig01)==T,"**",
ifelse (t(proportionCoef_cog11_sig05)==T,"*",""))
plotcog11 + geom_text(data = opt_coef_cog11_matrix,
label = opt_coef_cog11_matrix$star05, nudge_y = 0)+ ylim(-.03, .13)
View(opt_coef_cog13_matrix)
View(opt_coef_cog11_matrix)
View(opt_coef_emo11_matrix)
proportionCoef_cog11
View(BFI_labels)
proportionCor_emo11
proportionCoef_emo11
PermutVector_emo11_erase_after_check <- replicate(n=10000,
expr=CrossValRidgePermut(
DImp=DImp1.1,relvar=relvar_emotional,
yname="EMPQ_emotional_11",
RidgePermut,ScrambleEmpathyVar))
#Packages
packages <- c('psych', 'Hmisc', 'glmnet','ggplot2', 'reshape')
lapply(packages, require, character.only = TRUE)
PermutVector_emo11_erase_after_check <- replicate(n=10000,
expr=CrossValRidgePermut(
DImp=DImp1.1,relvar=relvar_emotional,
yname="EMPQ_emotional_11",
RidgePermut,ScrambleEmpathyVar))
PermutVector_emo11_erase_after_check[3,]
head(PermutVector_emo11_erase_after_check[3,])
head(PermutVector_emo11[3,])
proportionCoef_emo11_erase_after_check <- matrix(nrow=1,ncol=44)
for (i in 1:44){
proportionCoef_emo11[i] <- sum (realCoef_emo11[i] > PermutVector_emo11_erase_after_check[3,])}
head(proportionCoef_emo11)
head(proportionCoef_emo11_erase_after_check)
#what is the proportion of cases where the real coefficient is higher than the maximal permuted coefficient
proportionCoef_emo11 <- matrix(nrow=1,ncol=44)
for (i in 1:44){
proportionCoef_emo11[i] <- sum (realCoef_emo11[i] > PermutVector_emo11[3,])}
proportionCoef_emo11_erase_after_check <- matrix(nrow=1,ncol=44)
for (i in 1:44){
proportionCoef_emo11_erase_after_check[i] <- sum (realCoef_emo11[i] > PermutVector_emo11_erase_after_check[3,])}
head(proportionCoef_emo11)
head(proportionCoef_emo11_erase_after_check)
opt_coef_emo11_matrix$aveCoef
# This script performs the ridge regression, predicting empathy from Big-Five nuanced items
# and creates the empathic personality profiles
#Preparations
rm(list = ls()) # clean the global environment
cat ("\014")    #clean the R console
#Packages
packages <- c('psych', 'Hmisc', 'glmnet','ggplot2', 'reshape')
lapply(packages, require, character.only = TRUE)
#Preparing the file
D <- read.csv("~/Documents/projects/Empathy-Personality-Adolecence/OSF/data/Age11_EmpPer_anonymized.csv")
D <- D[D$isOut==0,]                      #take out children that should not be included (see supplementary method)
D <- subset(D, !is.na(D$EMPQ_emotional)) #take out children with no empathy measures
#############################################################################################
######################### Data Preprocessing - Age 11 #######################################
#############################################################################################
#Handling missing values
#first count how many missing values are in each var:
ind <- which(colnames(D)=="el_BFI1")
descD <- describe(D[,ind:(ind+43)])
#calculate percentage of missing values for each item (descD$itemname[2])
missingBFI11 <- c()
for (i in 1:44){
eval(parse(text= paste0("missingBFI11[",i,"] <-as.numeric(descD$el_BFI",i,
"$counts[2])/ nrow(D)")))
}
max(missingBFI11)           #find the maximum percentage of missing values
#Imputations of missing values for the Big5 (pmm)
set.seed(12) #set the random vector to always be the same vector
Imp_B5 <- aregImpute (formula= ~el_BFI1+ el_BFI2+ el_BFI3+ el_BFI4+ el_BFI5+ el_BFI6+ el_BFI7+ el_BFI8+el_BFI9+ el_BFI10+
el_BFI11+ el_BFI12+ el_BFI13+ el_BFI14+ el_BFI15+ el_BFI16+ el_BFI17+ el_BFI18+el_BFI19+ el_BFI20+
el_BFI21+ el_BFI22+ el_BFI23+ el_BFI24+ el_BFI25+ el_BFI26+ el_BFI27+ el_BFI28+el_BFI29+ el_BFI30+
el_BFI31+ el_BFI32+ el_BFI33+ el_BFI34+ el_BFI35+ el_BFI36+ el_BFI37+ el_BFI38+el_BFI39+ el_BFI40+
el_BFI41+ el_BFI42+ el_BFI43+ el_BFI44,
data=D, x=T,n.impute=5 , nk=0, type="pmm")
#Creating five data sets with different imputed values
#DImp1 is the data frame reported in the paper.
#The overall prediction of empathy from personality was examined on the other 4 datasets
#as a robustness check (see appendix)
DImp1_B5 <-as.data.frame(impute.transcan(Imp_B5,imputation=1,data=D,list.out=T,pr=F))
DImp2_B5 <-as.data.frame(impute.transcan(Imp_B5,imputation=2,data=D,list.out=T,pr=F))
DImp3_B5 <-as.data.frame(impute.transcan(Imp_B5,imputation=3,data=D,list.out=T,pr=F))
DImp4_B5 <-as.data.frame(impute.transcan(Imp_B5,imputation=4,data=D,list.out=T,pr=F))
DImp5_B5 <-as.data.frame(impute.transcan(Imp_B5,imputation=5,data=D,list.out=T,pr=F))
col <- colnames(D)
varsEmp <- c(which(col=="EMPQ_emotional"), which(col=="EMPQ_cognitive"))
DImp1 <-cbind.data.frame(D[,c(1,2)],DImp1_B5, D[,varsEmp])
DImp2 <-cbind.data.frame(D[,c(1,2)],DImp2_B5, D[,varsEmp])
DImp3 <-cbind.data.frame(D[,c(1,2)],DImp3_B5, D[,varsEmp])
DImp4 <-cbind.data.frame(D[,c(1,2)],DImp4_B5, D[,varsEmp])
DImp5 <-cbind.data.frame(D[,c(1,2)],DImp5_B5, D[,varsEmp])
#reverse items  (items' content description will be added soon)
CreateReverseItems_allData <-function(DImp) {
DImp$el_BFI6_Rev <-  6-DImp$el_BFI6
DImp$el_BFI21_Rev <- 6-DImp$el_BFI21
DImp$el_BFI31_Rev <- 6-DImp$el_BFI31
DImp$el_BFI2_Rev <-  6-DImp$el_BFI2
DImp$el_BFI12_Rev <- 6-DImp$el_BFI12
DImp$el_BFI27_Rev <- 6-DImp$el_BFI27
DImp$el_BFI37_Rev <- 6-DImp$el_BFI37
DImp$el_BFI8_Rev <-  6-DImp$el_BFI8
DImp$el_BFI18_Rev <- 6-DImp$el_BFI18
DImp$el_BFI23_Rev <- 6-DImp$el_BFI23
DImp$el_BFI43_Rev <- 6-DImp$el_BFI43
DImp$el_BFI9_Rev <-  6-DImp$el_BFI9
DImp$el_BFI24_Rev <- 6-DImp$el_BFI24
DImp$el_BFI34_Rev <- 6-DImp$el_BFI34
DImp$el_BFI35_Rev <- 6-DImp$el_BFI35
DImp$el_BFI41_Rev <- 6-DImp$el_BFI41
assign ("DImp",DImp,envir = .GlobalEnv)
}
CreateReverseItems_allData(DImp1)    #if you want to check another imputed dataset, enter it here instead of DImp1
DImp1.1 <- DImp
#defining the relevant variables for the Ridge regression
col <- colnames(DImp1.1)
relvar_emotional <- c(which (col=="EMPQ_emotional"),
which (col=="el_BFI1"), which (col=="el_BFI2_Rev"), which (col=="el_BFI3"),which (col=="el_BFI4"),
which (col=="el_BFI5"),which (col=="el_BFI6_Rev"),which (col=="el_BFI7"),which (col=="el_BFI8_Rev"),
which (col=="el_BFI9_Rev"),which (col=="el_BFI10"),which (col=="el_BFI11"),which (col=="el_BFI12_Rev"),
which (col=="el_BFI13"),which (col=="el_BFI14"),which (col=="el_BFI15"),which (col=="el_BFI16"),
which (col=="el_BFI17"),which (col=="el_BFI18_Rev"),which (col=="el_BFI19"),which (col=="el_BFI20"),
which (col=="el_BFI21_Rev"),which (col=="el_BFI22"),which (col=="el_BFI23_Rev"),which (col=="el_BFI24_Rev"),
which (col=="el_BFI25"),which (col=="el_BFI26"),which (col=="el_BFI27_Rev"),which (col=="el_BFI28"),
which (col=="el_BFI29"),which (col=="el_BFI30"),which (col=="el_BFI31_Rev"),which (col=="el_BFI32"),
which (col=="el_BFI33"),which (col=="el_BFI34_Rev"),which (col=="el_BFI35_Rev"),which (col=="el_BFI36"),
which (col=="el_BFI37_Rev"),which (col=="el_BFI38"),which (col=="el_BFI39"),which (col=="el_BFI40"),
which (col=="el_BFI41_Rev"),which (col=="el_BFI42"),which (col=="el_BFI43_Rev"),which (col=="el_BFI44"))
relvar_cognitive <- c(which(col=="EMPQ_cognitive"),
which (col=="el_BFI1"), which (col=="el_BFI2_Rev"), which (col=="el_BFI3"),which (col=="el_BFI4"),
which (col=="el_BFI5"),which (col=="el_BFI6_Rev"),which (col=="el_BFI7"),which (col=="el_BFI8_Rev"),
which (col=="el_BFI9_Rev"),which (col=="el_BFI10"),which (col=="el_BFI11"),which (col=="el_BFI12_Rev"),
which (col=="el_BFI13"),which (col=="el_BFI14"),which (col=="el_BFI15"),which (col=="el_BFI16"),
which (col=="el_BFI17"),which (col=="el_BFI18_Rev"),which (col=="el_BFI19"),which (col=="el_BFI20"),
which (col=="el_BFI21_Rev"),which (col=="el_BFI22"),which (col=="el_BFI23_Rev"),which (col=="el_BFI24_Rev"),
which (col=="el_BFI25"),which (col=="el_BFI26"),which (col=="el_BFI27_Rev"),which (col=="el_BFI28"),
which (col=="el_BFI29"),which (col=="el_BFI30"),which (col=="el_BFI31_Rev"),which (col=="el_BFI32"),
which (col=="el_BFI33"),which (col=="el_BFI34_Rev"),which (col=="el_BFI35_Rev"),which (col=="el_BFI36"),
which (col=="el_BFI37_Rev"),which (col=="el_BFI38"),which (col=="el_BFI39"),which (col=="el_BFI40"),
which (col=="el_BFI41_Rev"),which (col=="el_BFI42"),which (col=="el_BFI43_Rev"),which (col=="el_BFI44"))
#changing the names of age 11 and age 13 to be the same
newnames <- gsub(x=colnames(DImp1.1[,relvar_emotional]),pattern="el_", replacement="")
colnames(DImp1.1)[relvar_emotional] <- newnames
#dividing the 6 folds so two twins from the same family will always be in the same test fold
#gfold is the variable allocating family to a specific fold
unique_ifams <- unique(DImp1.1$ifam)
set.seed(32189)
unique_ifams <- sample(unique_ifams)
remainder<-length(unique_ifams)%%6
nfold <- (length(unique_ifams)-remainder)/6
gfold <- c(rep(1, times=nfold), rep(2, times=nfold), rep(3, times=nfold),
rep(4, times=nfold), rep(5, times=nfold), rep(6, times=nfold))
gfold <- c(gfold,1:remainder)
unique_ifams <- cbind(unique_ifams,gfold)
ifams<- as.data.frame(rbind(unique_ifams, unique_ifams))
colnames(ifams) <- c("ifam","gfold")
ifams$ID<- c(rep(1,times=nrow(unique_ifams)),rep(4,times=nrow(unique_ifams)))  # allocate ID for each twin (ID 1=older twin, ID 4= younger twin)
DImp1.1<- merge(DImp1.1,ifams, by=c("ifam","ID"), all.x = T, all.y = F)        #merge the gfold var with the data
#############################################################################################
######################### Ridge regression function #########################################
#############################################################################################
#create a vector of possible lambda values. These values will be examined in
#a nested cross-validation procedure to find the optimal lambda that produces the lowest prediction error
#ridge regression function
Ridge <- function (DImp,gfold,relvar) {
#find the best lambda-
#use glmnet default range search by lambda=NULL
#alpha=0 means we use Ridge regression (as opposed to Lasso regression)
#nfolds=10 means that the nested cross-validation procedure for finding the optimal lambda is performed on 10 folds
set.seed(10000)
cv_fit <- cv.glmnet(x=as.matrix(DImp[DImp$gfold != gfold,relvar[2:45]]),
y=DImp[DImp$gfold != gfold,relvar[1]],
alpha=0, lambda=NULL,nfolds=10)
opt_lambda <- cv_fit$lambda.min          #find the optimal lambda which produces the lowest prediction error
opt_lambda_ind <- which(cv_fit$lambda==opt_lambda)   #find the optimal lambda index inside the vector
#what are the coefficients when the lambda is optimal?
opt_coef <- as.matrix(cv_fit$glmnet.fit$beta[,opt_lambda_ind])
#after finding the best lambda, train the entire train set with that lambda
fit <- glmnet(x=as.matrix(DImp[DImp$gfold != gfold,relvar[2:45]]),
y=DImp[DImp$gfold != gfold,relvar[1]],
alpha = 0, lambda = opt_lambda)
#now check the prediction on the test set
#create the predicted scores according to the model
y_pred <- predict(fit, s=opt_lambda,
newx = as.matrix(DImp[DImp$gfold == gfold,relvar[2:45]]))
mse <- mean((DImp[DImp$gfold == gfold,relvar[1]]-y_pred)^2)     #MSE: mean of the squared differences between y and y predicted in the test set
assign ("fit",fit,envir = .GlobalEnv)                           #glmnet ridge regression results
assign ("opt_lambda",opt_lambda,envir = .GlobalEnv)             #optimal lambda value
assign ("opt_coef",opt_coef,envir = .GlobalEnv)                 #items' coefficients when the lambda is optimal
assign ("y_pred",y_pred,envir = .GlobalEnv)                     #y predicted for each participant
assign ("mse", mse,envir = .GlobalEnv)                          #mse for the test set
}
#############################################################################################
######################### Ridge regression - Age 11 #########################################
#############################################################################################
#scale all the BFI items so they all will mean=0 and SD=1
for (i in 2:45) {DImp1.1[,relvar_emotional[i]] <-
scale(DImp1.1[,relvar_emotional[i]], scale=T)}
##Emotional empathy
#doing Ridge regression on the folds
#fold 1
Ridge(DImp=DImp1.1,gfold=1,relvar=relvar_emotional)
fit_emo11_1 <- fit
opt_lambda_emo11_1 <- opt_lambda
opt_coef_emo11_1 <- opt_coef
y_pred_emo11_1 <- y_pred
mse_emo11_1 <- mse
#fold 2
Ridge(DImp=DImp1.1,gfold=2,relvar=relvar_emotional)
fit_emo11_2 <- fit
opt_lambda_emo11_2 <- opt_lambda
opt_coef_emo11_2 <- opt_coef
y_pred_emo11_2 <- y_pred
mse_emo11_2 <- mse
#fold 3
Ridge(DImp=DImp1.1,gfold=3,relvar=relvar_emotional)
fit_emo11_3 <- fit
opt_lambda_emo11_3 <- opt_lambda
opt_coef_emo11_3 <- opt_coef
y_pred_emo11_3 <- y_pred
mse_emo11_3 <- mse
#fold 4
Ridge(DImp=DImp1.1,gfold=4,relvar=relvar_emotional)
fit_emo11_4 <- fit
opt_lambda_emo11_4 <- opt_lambda
opt_coef_emo11_4 <- opt_coef
y_pred_emo11_4 <- y_pred
mse_emo11_4 <- mse
#fold 5
Ridge(DImp=DImp1.1,gfold=5,relvar=relvar_emotional)
fit_emo11_5 <- fit
opt_lambda_emo11_5 <- opt_lambda
opt_coef_emo11_5 <- opt_coef
y_pred_emo11_5 <- y_pred
mse_emo11_5 <- mse
#fold 6
Ridge(DImp=DImp1.1,gfold=6,relvar=relvar_emotional)
fit_emo11_6 <- fit
opt_lambda_emo11_6 <- opt_lambda
opt_coef_emo11_6 <- opt_coef
y_pred_emo11_6 <- y_pred
mse_emo11_6 <- mse
#computing the mean coefficients across the folds
opt_coef_emo11_matrix <- as.data.frame(cbind (opt_coef_emo11_1,
opt_coef_emo11_2,
opt_coef_emo11_3,
opt_coef_emo11_4,
opt_coef_emo11_5,
opt_coef_emo11_6))
opt_coef_emo11_matrix$aveCoef <- rowMeans(opt_coef_emo11_matrix)
#finding the mean correlation between the outcome and the predicted value (y pred) across the folds
cor_emo11 <-1:6
#first do this for each test set
for (i in 1:6) {
cor_emo11[i] <- cor.test(DImp1.1$EMPQ_emotional[DImp1.1$gfold ==i],
eval(parse(text=paste0("y_pred_emo11_",i))))[4]}
cor_emo11 <- as.numeric(cor_emo11)
#now average across all the folds
avecor_emo11 <- mean(cor_emo11)   #mean correlation
aveR2_emo11  <- avecor_emo11^2    #mean R2
#computing the mean mse across the folds
mse_emo11 <-1:6
for (i in 1:6) { mse_emo11[i] <- eval(parse(text=paste0("mse_emo11_",i)))}
avemse_emo11 <- mean(mse_emo11)
#Cognitive empathy
#doing Ridge regression on the folds
#fold 1
Ridge(DImp=DImp1.1,gfold=1,relvar=relvar_cognitive)
fit_cog11_1 <- fit
opt_lambda_cog11_1 <- opt_lambda
opt_coef_cog11_1 <- opt_coef
y_pred_cog11_1 <- y_pred
mse_cog11_1 <- mse
#fold 2
Ridge(DImp=DImp1.1,gfold=2,relvar=relvar_cognitive)
fit_cog11_2 <- fit
opt_lambda_cog11_2 <- opt_lambda
opt_coef_cog11_2 <- opt_coef
y_pred_cog11_2 <- y_pred
mse_cog11_2 <- mse
#fold 3
Ridge(DImp=DImp1.1,gfold=3,relvar=relvar_cognitive)
fit_cog11_3 <- fit
opt_lambda_cog11_3 <- opt_lambda
opt_coef_cog11_3 <- opt_coef
y_pred_cog11_3 <- y_pred
mse_cog11_3 <- mse
#fold 4
Ridge(DImp=DImp1.1,gfold=4,relvar=relvar_cognitive)
fit_cog11_4 <- fit
opt_lambda_cog11_4 <- opt_lambda
opt_coef_cog11_4 <- opt_coef
y_pred_cog11_4 <- y_pred
mse_cog11_4 <- mse
#fold 5
Ridge(DImp=DImp1.1,gfold=5,relvar=relvar_cognitive)
fit_cog11_5 <- fit
opt_lambda_cog11_5 <- opt_lambda
opt_coef_cog11_5 <- opt_coef
y_pred_cog11_5 <- y_pred
mse_cog11_5 <- mse
#fold 6
Ridge(DImp=DImp1.1,gfold=6,relvar=relvar_cognitive)
fit_cog11_6 <- fit
opt_lambda_cog11_6 <- opt_lambda
opt_coef_cog11_6 <- opt_coef
y_pred_cog11_6 <- y_pred
mse_cog11_6 <- mse
#computing the mean coefficients across the folds
opt_coef_cog11_matrix <- as.data.frame(cbind (opt_coef_cog11_1,
opt_coef_cog11_2,
opt_coef_cog11_3,
opt_coef_cog11_4,
opt_coef_cog11_5,
opt_coef_cog11_6))
opt_coef_cog11_matrix$aveCoef <- rowMeans(opt_coef_cog11_matrix)
#finding the mean correlation between outcome and predicted value across the folds
cor_cog11 <-1:6
for (i in 1:6) {
cor_cog11[i] <- cor.test(DImp1.1$EMPQ_cognitive[DImp1.1$gfold ==i],
eval(parse(text=paste0("y_pred_cog11_",i))))[4]}
cor_cog11 <- as.numeric(cor_cog11)
avecor_cog11 <- mean(cor_cog11)  #mean correlation
aveR2_cog11  <- avecor_cog11^2    #mean R2
#computing the mean mse across the folds
mse_cog11 <-1:6
for (i in 1:6) { mse_cog11[i] <- eval(parse(text=paste0("mse_cog11_",i)))}
avemse_cog11 <- mean(mse_cog11)
opt_coef_emo11_matrix$aveCoef
