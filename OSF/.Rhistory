DImp$el_BFI21_Rev <- 6-DImp$el_BFI21
DImp$el_BFI31_Rev <- 6-DImp$el_BFI31
DImp$el_BFI2_Rev <-  6-DImp$el_BFI2
DImp$el_BFI12_Rev <- 6-DImp$el_BFI12
DImp$el_BFI27_Rev <- 6-DImp$el_BFI27
DImp$el_BFI37_Rev <- 6-DImp$el_BFI37
DImp$el_BFI8_Rev <-  6-DImp$el_BFI8
DImp$el_BFI18_Rev <- 6-DImp$el_BFI18
DImp$el_BFI23_Rev <- 6-DImp$el_BFI23
DImp$el_BFI43_Rev <- 6-DImp$el_BFI43
DImp$el_BFI9_Rev <-  6-DImp$el_BFI9
DImp$el_BFI24_Rev <- 6-DImp$el_BFI24
DImp$el_BFI34_Rev <- 6-DImp$el_BFI34
DImp$el_BFI35_Rev <- 6-DImp$el_BFI35
DImp$el_BFI41_Rev <- 6-DImp$el_BFI41
assign ("DImp",DImp,envir = .GlobalEnv)
}
CreateReverseItems_allData(DImp1)
DImp1.1 <- DImp
#defining the relevant variables for the Ridge regression
col <- colnames(DImp1.1)
relvar_emotional <- c(which (col=="EMPQ_emotional"),
which (col=="el_BFI1"), which (col=="el_BFI2_Rev"), which (col=="el_BFI3"),which (col=="el_BFI4"),
which (col=="el_BFI5"),which (col=="el_BFI6_Rev"),which (col=="el_BFI7"),which (col=="el_BFI8_Rev"),
which (col=="el_BFI9_Rev"),which (col=="el_BFI10"),which (col=="el_BFI11"),which (col=="el_BFI12_Rev"),
which (col=="el_BFI13"),which (col=="el_BFI14"),which (col=="el_BFI15"),which (col=="el_BFI16"),
which (col=="el_BFI17"),which (col=="el_BFI18_Rev"),which (col=="el_BFI19"),which (col=="el_BFI20"),
which (col=="el_BFI21_Rev"),which (col=="el_BFI22"),which (col=="el_BFI23_Rev"),which (col=="el_BFI24_Rev"),
which (col=="el_BFI25"),which (col=="el_BFI26"),which (col=="el_BFI27_Rev"),which (col=="el_BFI28"),
which (col=="el_BFI29"),which (col=="el_BFI30"),which (col=="el_BFI31_Rev"),which (col=="el_BFI32"),
which (col=="el_BFI33"),which (col=="el_BFI34_Rev"),which (col=="el_BFI35_Rev"),which (col=="el_BFI36"),
which (col=="el_BFI37_Rev"),which (col=="el_BFI38"),which (col=="el_BFI39"),which (col=="el_BFI40"),
which (col=="el_BFI41_Rev"),which (col=="el_BFI42"),which (col=="el_BFI43_Rev"),which (col=="el_BFI44"))
relvar_cognitive <- c(which(col=="EMPQ_cognitive"),
which (col=="el_BFI1"), which (col=="el_BFI2_Rev"), which (col=="el_BFI3"),which (col=="el_BFI4"),
which (col=="el_BFI5"),which (col=="el_BFI6_Rev"),which (col=="el_BFI7"),which (col=="el_BFI8_Rev"),
which (col=="el_BFI9_Rev"),which (col=="el_BFI10"),which (col=="el_BFI11"),which (col=="el_BFI12_Rev"),
which (col=="el_BFI13"),which (col=="el_BFI14"),which (col=="el_BFI15"),which (col=="el_BFI16"),
which (col=="el_BFI17"),which (col=="el_BFI18_Rev"),which (col=="el_BFI19"),which (col=="el_BFI20"),
which (col=="el_BFI21_Rev"),which (col=="el_BFI22"),which (col=="el_BFI23_Rev"),which (col=="el_BFI24_Rev"),
which (col=="el_BFI25"),which (col=="el_BFI26"),which (col=="el_BFI27_Rev"),which (col=="el_BFI28"),
which (col=="el_BFI29"),which (col=="el_BFI30"),which (col=="el_BFI31_Rev"),which (col=="el_BFI32"),
which (col=="el_BFI33"),which (col=="el_BFI34_Rev"),which (col=="el_BFI35_Rev"),which (col=="el_BFI36"),
which (col=="el_BFI37_Rev"),which (col=="el_BFI38"),which (col=="el_BFI39"),which (col=="el_BFI40"),
which (col=="el_BFI41_Rev"),which (col=="el_BFI42"),which (col=="el_BFI43_Rev"),which (col=="el_BFI44"))
#changing the names of age 11 and age 13 to be the same
newnames <- gsub(x=colnames(DImp1.1[,relvar_emotional]),pattern="el_", replacement="")
colnames(DImp1.1)[relvar_emotional] <- newnames
#dividing the 6 folds so two twins from the same family will always be in the same test fold
#gfold is the variable allocating family to a specific fold
unique_ifams <- unique(DImp1.1$ifam)
set.seed(32189)
unique_ifams <- sample(unique_ifams)
remainder<-length(unique_ifams)%%6
nfold <- (length(unique_ifams)-remainder)/6
gfold <- c(rep(1, times=nfold), rep(2, times=nfold), rep(3, times=nfold),
rep(4, times=nfold), rep(5, times=nfold), rep(6, times=nfold))
gfold <- c(gfold,1:remainder)
unique_ifams <- cbind(unique_ifams,gfold)
ifams<- as.data.frame(rbind(unique_ifams, unique_ifams))
colnames(ifams) <- c("ifam","gfold")
ifams$ID<- c(rep(1,times=nrow(unique_ifams)),rep(4,times=nrow(unique_ifams)))  # allocate ID for each twin (ID 1=older twin, ID 4= younger twin)
DImp1.1<- merge(DImp1.1,ifams, by=c("ifam","ID"), all.x = T, all.y = F)        #merge the gfold var with the data
#############################################################################################
######################### Ridge regression function #########################################
#############################################################################################
#create a vector of possible lambda values. These values will be examined in
#a nexted cross-validation procedure to find the optimal lambda that produces the lowest prediction error
# lambdas <- 10^seq(3, -2, by = -.1)
#ridge regression function
Ridge <- function (DImp,gfold,relvar) {
#find the best lambda-
#use glmnet default range search by lambda=NULL
#alpha=0 means we use Ridge regression (as opposed to lasso regression)
#nfolds=10 means that the nested cross-validation proceudre to find the optimal lambda is perdormed on 10 folds
set.seed(10000)
cv_fit <- cv.glmnet(x=as.matrix(DImp[DImp$gfold != gfold,relvar[2:45]]),
y=DImp[DImp$gfold != gfold,relvar[1]],
alpha=0, lambda=NULL,nfolds=10)
opt_lambda <- cv_fit$lambda.min          #find the optimal lambda which produces the lowest prediction error
opt_lambda_ind <- which(cv_fit$lambda==opt_lambda)   #find the optimal lambda index inside the vector
#what are the coefficients when the lambda is optimal?
opt_coef <- as.matrix(cv_fit$glmnet.fit$beta[,opt_lambda_ind])
#after finding the best lambda, train the entire train set with that lambda
fit <- glmnet(x=as.matrix(DImp[DImp$gfold != gfold,relvar[2:45]]),
y=DImp[DImp$gfold != gfold,relvar[1]],
alpha = 0, lambda = opt_lambda)
#now check the prediction on the test set
y_pred <- predict(fit, s=opt_lambda,
newx = as.matrix(DImp[DImp$gfold == gfold,relvar[2:45]]))
mse <- mean((DImp[DImp$gfold == gfold,relvar[1]]-y_pred)^2)     #MSE: mean of the squared differences between y and y predicted in the test set
assign ("fit",fit,envir = .GlobalEnv)                           #glmnet ridge regression results
assign ("opt_lambda",opt_lambda,envir = .GlobalEnv)             #optimal lambda value
assign ("opt_coef",opt_coef,envir = .GlobalEnv)                 #items' coefficients when the lambda is optimal
assign ("y_pred",y_pred,envir = .GlobalEnv)                     #y predicted for each participant
assign ("mse", mse,envir = .GlobalEnv)                          #mse for the test set
}
#############################################################################################
######################### Ridge regression - Age 11 #########################################
#############################################################################################
#scale all the BFI items so they all will mean=0 and SD=1
for (i in 2:45) {DImp1.1[,relvar_emotional[i]] <-
scale(DImp1.1[,relvar_emotional[i]], scale=T)}
##Emotional empathy
#doing Ridge regression on the folds
#fold 1
Ridge(DImp=DImp1.1,gfold=1,relvar=relvar_emotional)
fit_emo11_1 <- fit
opt_lambda_emo11_1 <- opt_lambda
opt_coef_emo11_1 <- opt_coef
y_pred_emo11_1 <- y_pred
mse_emo11_1 <- mse
#fold 2
Ridge(DImp=DImp1.1,gfold=2,relvar=relvar_emotional)
fit_emo11_2 <- fit
opt_lambda_emo11_2 <- opt_lambda
opt_coef_emo11_2 <- opt_coef
y_pred_emo11_2 <- y_pred
mse_emo11_2 <- mse
#fold 3
Ridge(DImp=DImp1.1,gfold=3,relvar=relvar_emotional)
fit_emo11_3 <- fit
opt_lambda_emo11_3 <- opt_lambda
opt_coef_emo11_3 <- opt_coef
y_pred_emo11_3 <- y_pred
mse_emo11_3 <- mse
#fold 4
Ridge(DImp=DImp1.1,gfold=4,relvar=relvar_emotional)
fit_emo11_4 <- fit
opt_lambda_emo11_4 <- opt_lambda
opt_coef_emo11_4 <- opt_coef
y_pred_emo11_4 <- y_pred
mse_emo11_4 <- mse
#fold 5
Ridge(DImp=DImp1.1,gfold=5,relvar=relvar_emotional)
fit_emo11_5 <- fit
opt_lambda_emo11_5 <- opt_lambda
opt_coef_emo11_5 <- opt_coef
y_pred_emo11_5 <- y_pred
mse_emo11_5 <- mse
#fold 6
Ridge(DImp=DImp1.1,gfold=6,relvar=relvar_emotional)
fit_emo11_6 <- fit
opt_lambda_emo11_6 <- opt_lambda
opt_coef_emo11_6 <- opt_coef
y_pred_emo11_6 <- y_pred
mse_emo11_6 <- mse
#computing the mean coefficients across the folds
opt_coef_emo11_matrix <- as.data.frame(cbind (opt_coef_emo11_1,
opt_coef_emo11_2,
opt_coef_emo11_3,
opt_coef_emo11_4,
opt_coef_emo11_5,
opt_coef_emo11_6))
opt_coef_emo11_matrix$aveCoef <- rowMeans(opt_coef_emo11_matrix)
#finding the mean correlation between the outcome and predicted value (y pred) across the folds
cor_emo11 <-1:6
#first do this for each test set
for (i in 1:6) {
cor_emo11[i] <- cor.test(DImp1.1$EMPQ_emotional[DImp1.1$gfold ==i],
eval(parse(text=paste0("y_pred_emo11_",i))))[4]}
cor_emo11 <- as.numeric(cor_emo11)
#now average across all the folds
avecor_emo11 <- mean(cor_emo11)   #mean correlation
aveR2_emo11  <- avecor_emo11^2    #mean R2
#computing the mean mse across the folds
mse_emo11 <-1:6
for (i in 1:6) { mse_emo11[i] <- eval(parse(text=paste0("mse_emo11_",i)))}
avemse_emo11 <- mean(mse_emo11)
#############################################################################################
################## Specific items' coefficients visualization - Age 11 ######################
#############################################################################################
#allocate items to their original Big-Five domains
opt_coef_emo11_matrix$category <- NA
#EXTRAVERSION
for (i in c(1,11,16,26,36)){
opt_coef_emo11_matrix$category[rownames(opt_coef_emo11_matrix)==paste0("BFI",i)] <- "E"}
#reverse items
for (i in c(6,21,31)){
opt_coef_emo11_matrix$category[rownames(opt_coef_emo11_matrix)==paste0("BFI",i,"_Rev")] <- "E"}
#AGREABELNESS
for (i in c(7,17,22,32,42)){
opt_coef_emo11_matrix$category[rownames(opt_coef_emo11_matrix)==paste0("BFI",i)] <- "A"}
#reverse items
for (i in c(2,12,27,37)){
opt_coef_emo11_matrix$category[rownames(opt_coef_emo11_matrix)==paste0("BFI",i,"_Rev")] <- "A"}
#OPENESS
for (i in c(5,10,15,20,25,30,40,44)){
opt_coef_emo11_matrix$category[rownames(opt_coef_emo11_matrix)==paste0("BFI",i)] <- "O"}
#reverse items
for (i in c(35,41)){
opt_coef_emo11_matrix$category[rownames(opt_coef_emo11_matrix)==paste0("BFI",i,"_Rev")]<- "O"}
#CONCIENCIOUSNESS
for (i in c(3,13,28,33,38)){
opt_coef_emo11_matrix$category[rownames(opt_coef_emo11_matrix)==paste0("BFI",i)] <- "C"}
#reverse items
for (i in c(8,18,23,43)){
opt_coef_emo11_matrix$category[rownames(opt_coef_emo11_matrix)==paste0("BFI",i,"_Rev")]<- "C"}
#NEUROTICISM
for (i in c(4,14,19,29,39)){
opt_coef_emo11_matrix$category[rownames(opt_coef_emo11_matrix)==paste0("BFI",i)] <- "N"}
#reverse items
for (i in c(9,24,34)){
opt_coef_emo11_matrix$category[rownames(opt_coef_emo11_matrix)==paste0("BFI",i,"_Rev")]<-"N"}
BFI_labels <- read.csv ("../OSF/data/BFI items.csv")
opt_coef_emo11_matrix$item <- rownames(opt_coef_emo11_matrix)
opt_coef_emo11_matrix <- cbind(opt_coef_emo11_matrix, BFI_labels)
plotemo11 <- ggplot(data= opt_coef_emo11_matrix,
aes(reorder(x=opt_coef_emo11_matrix$label,opt_coef_emo11_matrix$aveCoef),
y=opt_coef_emo11_matrix$aveCoef,
fill=opt_coef_emo11_matrix$category))+
geom_bar(stat="identity")+ coord_flip()+
ggtitle("Regression coefficients of  personality indicators")+
labs(x="Personality indicator", y="Regression coefficient", fill="Big5 scale")+
scale_fill_manual(values=c("#F8A6F8", "#F7563B", "#F59D3D", "#433FF3", "#5FD3D3"))+
theme_bw()+ theme(legend.position=c(0.95, 0.15), legend.title = element_text(size=12),
plot.title=element_text(size=16, face="bold", family="serif",hjust = 0.5),
axis.title =element_text(size=12, face="bold", family="serif"),
text=element_text(family="serif"))
##Cognitive empathy
#doing Ridge regression on the folds
#fold 1
Ridge(DImp=DImp1.1,gfold=1,relvar=relvar_cognitive)
fit_cog11_1 <- fit
opt_lambda_cog11_1 <- opt_lambda
opt_coef_cog11_1 <- opt_coef
y_pred_cog11_1 <- y_pred
mse_cog11_1 <- mse
#fold 2
Ridge(DImp=DImp1.1,gfold=2,relvar=relvar_cognitive)
fit_cog11_2 <- fit
opt_lambda_cog11_2 <- opt_lambda
opt_coef_cog11_2 <- opt_coef
y_pred_cog11_2 <- y_pred
mse_cog11_2 <- mse
#fold 3
Ridge(DImp=DImp1.1,gfold=3,relvar=relvar_cognitive)
fit_cog11_3 <- fit
opt_lambda_cog11_3 <- opt_lambda
opt_coef_cog11_3 <- opt_coef
y_pred_cog11_3 <- y_pred
mse_cog11_3 <- mse
#fold 4
Ridge(DImp=DImp1.1,gfold=4,relvar=relvar_cognitive)
fit_cog11_4 <- fit
opt_lambda_cog11_4 <- opt_lambda
opt_coef_cog11_4 <- opt_coef
y_pred_cog11_4 <- y_pred
mse_cog11_4 <- mse
#fold 5
Ridge(DImp=DImp1.1,gfold=5,relvar=relvar_cognitive)
fit_cog11_5 <- fit
opt_lambda_cog11_5 <- opt_lambda
opt_coef_cog11_5 <- opt_coef
y_pred_cog11_5 <- y_pred
mse_cog11_5 <- mse
#fold 6
Ridge(DImp=DImp1.1,gfold=6,relvar=relvar_cognitive)
fit_cog11_6 <- fit
opt_lambda_cog11_6 <- opt_lambda
opt_coef_cog11_6 <- opt_coef
y_pred_cog11_6 <- y_pred
mse_cog11_6 <- mse
#computing the mean coefficients across the folds
opt_coef_cog11_matrix <- as.data.frame(cbind (opt_coef_cog11_1,
opt_coef_cog11_2,
opt_coef_cog11_3,
opt_coef_cog11_4,
opt_coef_cog11_5,
opt_coef_cog11_6))
opt_coef_cog11_matrix$aveCoef <- rowMeans(opt_coef_cog11_matrix)
#finding the mean correlation between outcome and predicted value across the folds
cor_cog11 <-1:6
for (i in 1:6) {
cor_cog11[i] <- cor.test(DImp1.1$EMPQ_cognitive[DImp1.1$gfold ==i],
eval(parse(text=paste0("y_pred_cog11_",i))))[4]}
cor_cog11 <- as.numeric(cor_cog11)
avecor_cog11 <- mean(cor_cog11)  #mean correlation
aveR2_cog11  <- avecor_cog11^2    #mean R2
#computing the mean mse across the folds
mse_cog11 <-1:6
for (i in 1:6) { mse_cog11[i] <- eval(parse(text=paste0("mse_cog11_",i)))}
avemse_cog11 <- mean(mse_cog11)
#visualize specific items' coefficients (predictive power of empathy)
#allocate items to their original Big-Five domains
opt_coef_cog11_matrix$category <- NA
#EXTRAVERSION
for (i in c(1,11,16,26,36)){
opt_coef_cog11_matrix$category[rownames(opt_coef_cog11_matrix)==paste0("BFI",i)] <- "E"}
#reverse items
for (i in c(6,21,31)){
opt_coef_cog11_matrix$category[rownames(opt_coef_cog11_matrix)==paste0("BFI",i,"_Rev")] <- "E"}
#AGREABELNESS
for (i in c(7,17,22,32,42)){
opt_coef_cog11_matrix$category[rownames(opt_coef_cog11_matrix)==paste0("BFI",i)] <- "A"}
#reverse items
for (i in c(2,12,27,37)){
opt_coef_cog11_matrix$category[rownames(opt_coef_cog11_matrix)==paste0("BFI",i,"_Rev")] <- "A"}
#OPENESS
for (i in c(5,10,15,20,25,30,40,44)){
opt_coef_cog11_matrix$category[rownames(opt_coef_cog11_matrix)==paste0("BFI",i)] <- "O"}
#reverse items
for (i in c(35,41)){
opt_coef_cog11_matrix$category[rownames(opt_coef_cog11_matrix)==paste0("BFI",i,"_Rev")]<- "O"}
#CONCIENCIOUSNESS
for (i in c(3,13,28,33,38)){
opt_coef_cog11_matrix$category[rownames(opt_coef_cog11_matrix)==paste0("BFI",i)] <- "C"}
#reverse items
for (i in c(8,18,23,43)){
opt_coef_cog11_matrix$category[rownames(opt_coef_cog11_matrix)==paste0("BFI",i,"_Rev")]<- "C"}
#NEUROTICISM
for (i in c(4,14,19,29,39)){
opt_coef_cog11_matrix$category[rownames(opt_coef_cog11_matrix)==paste0("BFI",i)] <- "N"}
#reverse items
for (i in c(9,24,34)){
opt_coef_cog11_matrix$category[rownames(opt_coef_cog11_matrix)==paste0("BFI",i,"_Rev")]<-"N"}
opt_coef_cog11_matrix$item <- rownames(opt_coef_cog11_matrix)
opt_coef_cog11_matrix <- cbind(opt_coef_cog11_matrix, BFI_labels)
plotcog11 <- ggplot(data= opt_coef_cog11_matrix,
aes(reorder(x=opt_coef_cog11_matrix$label,opt_coef_cog11_matrix$aveCoef),
y=opt_coef_cog11_matrix$aveCoef,
fill=opt_coef_cog11_matrix$category))+
geom_bar(stat="identity")+ coord_flip()+
ggtitle("Regression coefficients of  personality indicators")+
labs(x="Personality indicator", y="Regression coefficient", fill="Big5 scale")+
scale_fill_manual(values=c("#F8A6F8", "#F7563B", "#F59D3D", "#433FF3", "#5FD3D3"))+
theme_bw()+ theme(legend.position=c(0.95, 0.15), legend.title = element_text(size=12),
plot.title=element_text(size=16, face="bold", family="serif",hjust = 0.5),
axis.title =element_text(size=12, face="bold", family="serif"),
text=element_text(family="serif"))
#################################################################################################
############################ Data preprocessing - AGE 13  #######################################
#################################################################################################
#preparing the file
D13 <- read.csv ("~/Documents/projects/Empathy-Personality-Adolecence/OSF/data/Age13_EmpPer_anonymized.csv")
D13 <- D13[D13$isOut==0,]                      #take out children that should not be included (see supplementary method)
D13 <- subset(D13, !is.na(D13$EMPQ_emotional)) #take out children with no empathy measures
#Handling missing values
#first count how many missing values are in each var:
ind <- which(colnames(D13)=="tn_BFI1")
descD13 <- describe(D13[,ind:(ind+43)])
#calculate percentage of missing values for each item (descD13$itemname[2])
missingBFI13 <- c()
for (i in 1:44){
eval(parse(text= paste0("missingBFI13[",i,"] <-as.numeric(descD13$tn_BFI",i,
"$counts[2])/ nrow(D13)")))
}
max(missingBFI13)    #find the maximum percentage of missing values
#Imputations of missing values for the Big5 (pmm)
set.seed(12) #set the random vector to always be the same vector
Imp13_B5 <- aregImpute (formula= ~tn_BFI1+ tn_BFI2+ tn_BFI3+ tn_BFI4+ tn_BFI5+ tn_BFI6+ tn_BFI7+ tn_BFI8+tn_BFI9+ tn_BFI10+
tn_BFI11+ tn_BFI12+ tn_BFI13+ tn_BFI14+ tn_BFI15+ tn_BFI16+ tn_BFI17+ tn_BFI18+tn_BFI19+ tn_BFI20+
tn_BFI21+ tn_BFI22+ tn_BFI23+ tn_BFI24+ tn_BFI25+ tn_BFI26+ tn_BFI27+ tn_BFI28+tn_BFI29+ tn_BFI30+
tn_BFI31+ tn_BFI32+ tn_BFI33+ tn_BFI34+ tn_BFI35+ tn_BFI36+ tn_BFI37+ tn_BFI38+tn_BFI39+ tn_BFI40+
tn_BFI41+ tn_BFI42+ tn_BFI43+ tn_BFI44,
data=D13, x=T,n.impute=5 , nk=0, type="pmm")
#Creating five data sets with different imputed values
#DImp1 is the data frame reported in the paper.
#The overall prediction of empathy from personality was examined on the other 4 datasets as a robustness check
D13Imp1_B5 <-as.data.frame(impute.transcan(Imp13_B5,imputation=1,data=D13,list.out=T,pr=F))
D13Imp2_B5 <-as.data.frame(impute.transcan(Imp13_B5,imputation=2,data=D13,list.out=T,pr=F))
D13Imp3_B5 <-as.data.frame(impute.transcan(Imp13_B5,imputation=3,data=D13,list.out=T,pr=F))
D13Imp4_B5 <-as.data.frame(impute.transcan(Imp13_B5,imputation=4,data=D13,list.out=T,pr=F))
D13Imp5_B5 <-as.data.frame(impute.transcan(Imp13_B5,imputation=5,data=D13,list.out=T,pr=F))
col <- colnames(D13)
varsEmp <- c(which(col=="EMPQ_emotional"), which(col=="EMPQ_cognitive"))
D13Imp1 <-cbind.data.frame(D13[,c(1,2)],D13Imp1_B5, D13[,varsEmp])
D13Imp2 <-cbind.data.frame(D13[,c(1,2)],D13Imp2_B5, D13[,varsEmp])
D13Imp3 <-cbind.data.frame(D13[,c(1,2)],D13Imp3_B5, D13[,varsEmp])
D13Imp4 <-cbind.data.frame(D13[,c(1,2)],D13Imp4_B5, D13[,varsEmp])
D13Imp5 <-cbind.data.frame(D13[,c(1,2)],D13Imp5_B5, D13[,varsEmp])
#reverse items  (items' content description will be added soon)
CreateReverseItems_allData_age13 <-function(DImp) {
DImp$tn_BFI6_Rev <-  6-DImp$tn_BFI6
DImp$tn_BFI21_Rev <- 6-DImp$tn_BFI21
DImp$tn_BFI31_Rev <- 6-DImp$tn_BFI31
DImp$tn_BFI2_Rev <-  6-DImp$tn_BFI2
DImp$tn_BFI12_Rev <- 6-DImp$tn_BFI12
DImp$tn_BFI27_Rev <- 6-DImp$tn_BFI27
DImp$tn_BFI37_Rev <- 6-DImp$tn_BFI37
DImp$tn_BFI8_Rev <-  6-DImp$tn_BFI8
DImp$tn_BFI18_Rev <- 6-DImp$tn_BFI18
DImp$tn_BFI23_Rev <- 6-DImp$tn_BFI23
DImp$tn_BFI43_Rev <- 6-DImp$tn_BFI43
DImp$tn_BFI9_Rev <-  6-DImp$tn_BFI9
DImp$tn_BFI24_Rev <- 6-DImp$tn_BFI24
DImp$tn_BFI34_Rev <- 6-DImp$tn_BFI34
DImp$tn_BFI35_Rev <- 6-DImp$tn_BFI35
DImp$tn_BFI41_Rev <- 6-DImp$tn_BFI41
assign ("DImp",DImp,envir = .GlobalEnv)
}
CreateReverseItems_allData_age13(D13Imp1)
D13Imp1.1 <- DImp
#defining the relevant variables
col <- colnames(D13Imp1.1)
relvar_emotional_13 <- c(which (col=="EMPQ_emotional"),
which (col=="tn_BFI1"), which (col=="tn_BFI2_Rev"), which (col=="tn_BFI3"),which (col=="tn_BFI4"),
which (col=="tn_BFI5"),which (col=="tn_BFI6_Rev"),which (col=="tn_BFI7"),which (col=="tn_BFI8_Rev"),
which (col=="tn_BFI9_Rev"),which (col=="tn_BFI10"),which (col=="tn_BFI11"),which (col=="tn_BFI12_Rev"),
which (col=="tn_BFI13"),which (col=="tn_BFI14"),which (col=="tn_BFI15"),which (col=="tn_BFI16"),
which (col=="tn_BFI17"),which (col=="tn_BFI18_Rev"),which (col=="tn_BFI19"),which (col=="tn_BFI20"),
which (col=="tn_BFI21_Rev"),which (col=="tn_BFI22"),which (col=="tn_BFI23_Rev"),which (col=="tn_BFI24_Rev"),
which (col=="tn_BFI25"),which (col=="tn_BFI26"),which (col=="tn_BFI27_Rev"),which (col=="tn_BFI28"),
which (col=="tn_BFI29"),which (col=="tn_BFI30"),which (col=="tn_BFI31_Rev"),which (col=="tn_BFI32"),
which (col=="tn_BFI33"),which (col=="tn_BFI34_Rev"),which (col=="tn_BFI35_Rev"),which (col=="tn_BFI36"),
which (col=="tn_BFI37_Rev"),which (col=="tn_BFI38"),which (col=="tn_BFI39"),which (col=="tn_BFI40"),
which (col=="tn_BFI41_Rev"),which (col=="tn_BFI42"),which (col=="tn_BFI43_Rev"),which (col=="tn_BFI44"))
relvar_cognitive_13 <- c(which (col=="EMPQ_cognitive"),
which (col=="tn_BFI1"), which (col=="tn_BFI2_Rev"), which (col=="tn_BFI3"),which (col=="tn_BFI4"),
which (col=="tn_BFI5"),which (col=="tn_BFI6_Rev"),which (col=="tn_BFI7"),which (col=="tn_BFI8_Rev"),
which (col=="tn_BFI9_Rev"),which (col=="tn_BFI10"),which (col=="tn_BFI11"),which (col=="tn_BFI12_Rev"),
which (col=="tn_BFI13"),which (col=="tn_BFI14"),which (col=="tn_BFI15"),which (col=="tn_BFI16"),
which (col=="tn_BFI17"),which (col=="tn_BFI18_Rev"),which (col=="tn_BFI19"),which (col=="tn_BFI20"),
which (col=="tn_BFI21_Rev"),which (col=="tn_BFI22"),which (col=="tn_BFI23_Rev"),which (col=="tn_BFI24_Rev"),
which (col=="tn_BFI25"),which (col=="tn_BFI26"),which (col=="tn_BFI27_Rev"),which (col=="tn_BFI28"),
which (col=="tn_BFI29"),which (col=="tn_BFI30"),which (col=="tn_BFI31_Rev"),which (col=="tn_BFI32"),
which (col=="tn_BFI33"),which (col=="tn_BFI34_Rev"),which (col=="tn_BFI35_Rev"),which (col=="tn_BFI36"),
which (col=="tn_BFI37_Rev"),which (col=="tn_BFI38"),which (col=="tn_BFI39"),which (col=="tn_BFI40"),
which (col=="tn_BFI41_Rev"),which (col=="tn_BFI42"),which (col=="tn_BFI43_Rev"),which (col=="tn_BFI44"))
#changing the names of age 11 and age 13 to be the same
newnames <- gsub(x=colnames(D13Imp1.1[,relvar_emotional_13]),pattern="tn_", replacement="")
colnames(D13Imp1.1)[relvar_emotional_13] <- newnames
#dividing the 6 folds so two twins from the same family will always be in the same test fold
#gfold is the variable allocating family to a specific fold
unique_ifams_13 <- unique(D13Imp1.1$ifam)
set.seed(32189)
unique_ifams_13 <- sample(unique_ifams_13)
remainder<-length(unique_ifams_13)%%6
nfold <- (length(unique_ifams_13)-remainder)/6
gfold <- c(rep(1, times=nfold), rep(2, times=nfold), rep(3, times=nfold),
rep(4, times=nfold), rep(5, times=nfold), rep(6, times=nfold))
gfold <- c(gfold,1:remainder)
unique_ifams_13 <- cbind(unique_ifams_13,gfold)
ifams_13<- as.data.frame(rbind(unique_ifams_13, unique_ifams_13))
colnames(ifams_13) <- c("ifam","gfold")
ifams_13$ID<- c(rep(1,times=nrow(unique_ifams_13)),rep(4,times=nrow(unique_ifams_13)))  # allocate ID for each twin (ID 1=older twin, ID 4= younger twin)
D13Imp1.1<- merge(D13Imp1.1,ifams_13, by=c("ifam","ID"), all.x = T, all.y = F)          # merge the gfold var with the data
#############################################################################################
######################### Ridge regression - Age 13 #########################################
#############################################################################################
#scale all the BFI items so they all will have mean=0 and SD=1
for (i in 2:45) {D13Imp1.1[,relvar_emotional_13[i]] <-
scale(D13Imp1.1[,relvar_emotional_13[i]], scale=T)}
#emotional empathy
#fold 1
Ridge(DImp=D13Imp1.1,gfold=1,relvar=relvar_emotional_13)
fit_emo13_1 <- fit
opt_lambda_emo13_1 <- opt_lambda
opt_coef_emo13_1 <- opt_coef
y_pred_emo13_1 <- y_pred
mse_emo13_1 <- mse
#fold 2
Ridge(DImp=D13Imp1.1,gfold=2,relvar=relvar_emotional_13)
fit_emo13_2 <- fit
opt_lambda_emo13_2 <- opt_lambda
opt_coef_emo13_2 <- opt_coef
y_pred_emo13_2 <- y_pred
mse_emo13_2 <- mse
#fold 3
Ridge(DImp=D13Imp1.1,gfold=3,relvar=relvar_emotional_13)
fit_emo13_3 <- fit
opt_lambda_emo13_3 <- opt_lambda
opt_coef_emo13_3 <- opt_coef
y_pred_emo13_3 <- y_pred
mse_emo13_3 <- mse
#fold 4
Ridge(DImp=D13Imp1.1,gfold=4,relvar=relvar_emotional_13)
fit_emo13_4 <- fit
opt_lambda_emo13_4 <- opt_lambda
opt_coef_emo13_4 <- opt_coef
y_pred_emo13_4 <- y_pred
mse_emo13_4 <- mse
#fold 5
Ridge(DImp=D13Imp1.1,gfold=5,relvar=relvar_emotional_13)
fit_emo13_5 <- fit
opt_lambda_emo13_5 <- opt_lambda
opt_coef_emo13_5 <- opt_coef
y_pred_emo13_5 <- y_pred
mse_emo13_5 <- mse
#fold 6
Ridge(DImp=D13Imp1.1,gfold=6,relvar=relvar_emotional_13)
fit_emo13_6 <- fit
opt_lambda_emo13_6 <- opt_lambda
opt_coef_emo13_6 <- opt_coef
y_pred_emo13_6 <- y_pred
mse_emo13_6 <- mse
#computing the mean coefficients across the folds
opt_coef_emo13_matrix <- as.data.frame(cbind (opt_coef_emo13_1,
opt_coef_emo13_2,
opt_coef_emo13_3,
opt_coef_emo13_4,
opt_coef_emo13_5,
opt_coef_emo13_6))
opt_coef_emo13_matrix$aveCoef <- rowMeans(opt_coef_emo13_matrix)
#computing the mean correlation between outcome and predicted value across the folds
cor_emo13 <-1:6
for (i in 1:6) {
cor_emo13[i] <- cor.test(D13Imp1.1$EMPQ_emotional[D13Imp1.1$gfold ==i],
eval(parse(text=paste0("y_pred_emo13_",i))))[4]}
cor_emo13 <- as.numeric(cor_emo13)
avecor_emo13 <- mean(cor_emo13)  #mean correlation
aveR2_emo13  <- avecor_emo13^2   #mean R2
#computing the mean mse across the folds
mse_emo13 <-1:6
for (i in 1:6) { mse_emo13[i] <- eval(parse(text=paste0("mse_emo13_",i)))}
avemse_emo13 <- mean(mse_emo13)
#check the correlation between age 11 and age 13 average coefficients
cor.test(opt_coef_emo11_matrix$aveCoef,opt_coef_emo13_matrix$aveCoef)
rownames(opt_coef_emo11_matrix)==rownames(opt_coef_emo13_matrix)
#check the correlation between age 11 and age 13 average items' coefficients
#this indicates on age consistency in terms of specific nuances’ ability to predict empathy
cor.test(opt_coef_emo11_matrix$aveCoef,opt_coef_emo13_matrix$aveCoef)
